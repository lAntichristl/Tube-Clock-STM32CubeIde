
simple_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b30  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08004c3c  08004c3c  00005c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e14  08004e14  0000602c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e14  08004e14  0000602c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e14  08004e14  0000602c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e14  08004e14  00005e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e18  08004e18  00005e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08004e1c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  2000002c  08004e48  0000602c  2**2
                  ALLOC
 10 ._user_heap_stack 00000900  20000440  08004e48  00006440  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afd4  00000000  00000000  00006055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022bb  00000000  00000000  00011029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  000132e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000951  00000000  00000000  00013f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001885e  00000000  00000000  00014859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011435  00000000  00000000  0002d0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac3f  00000000  00000000  0003e4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c912b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003064  00000000  00000000  000c9170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000cc1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c24 	.word	0x08004c24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08004c24 	.word	0x08004c24

0800014c <BUTTON_LowLevelManager>:

/* Functions -----------------------------------------------------------------*/

/******************************************************************************/
void BUTTON_LowLevelManager()
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
  uint8_t currentStates[BUTTONS_NUM];

  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e076      	b.n	8000246 <BUTTON_LowLevelManager+0xfa>
  {
    currentStates[i] = HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin);
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4a3f      	ldr	r2, [pc, #252]	@ (8000258 <BUTTON_LowLevelManager+0x10c>)
 800015c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000160:	79fb      	ldrb	r3, [r7, #7]
 8000162:	493d      	ldr	r1, [pc, #244]	@ (8000258 <BUTTON_LowLevelManager+0x10c>)
 8000164:	00db      	lsls	r3, r3, #3
 8000166:	440b      	add	r3, r1
 8000168:	889b      	ldrh	r3, [r3, #4]
 800016a:	79fc      	ldrb	r4, [r7, #7]
 800016c:	4619      	mov	r1, r3
 800016e:	4610      	mov	r0, r2
 8000170:	f001 ff2e 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000174:	4603      	mov	r3, r0
 8000176:	461a      	mov	r2, r3
 8000178:	f104 0308 	add.w	r3, r4, #8
 800017c:	443b      	add	r3, r7
 800017e:	f803 2c04 	strb.w	r2, [r3, #-4]

    switch (buttonState[i])
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	4a35      	ldr	r2, [pc, #212]	@ (800025c <BUTTON_LowLevelManager+0x110>)
 8000186:	5cd3      	ldrb	r3, [r2, r3]
 8000188:	2b03      	cmp	r3, #3
 800018a:	d850      	bhi.n	800022e <BUTTON_LowLevelManager+0xe2>
 800018c:	a201      	add	r2, pc, #4	@ (adr r2, 8000194 <BUTTON_LowLevelManager+0x48>)
 800018e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000192:	bf00      	nop
 8000194:	080001a5 	.word	0x080001a5
 8000198:	080001bd 	.word	0x080001bd
 800019c:	080001df 	.word	0x080001df
 80001a0:	0800020d 	.word	0x0800020d
    {
      case BUTTON_STARTING:
        if (currentStates[i] == GPIO_BUTTON_NOT_PRESSED)
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	3308      	adds	r3, #8
 80001a8:	443b      	add	r3, r7
 80001aa:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80001ae:	2b01      	cmp	r3, #1
 80001b0:	d13f      	bne.n	8000232 <BUTTON_LowLevelManager+0xe6>
        {
          buttonState[i] = BUTTON_NOT_PRESSED;
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a29      	ldr	r2, [pc, #164]	@ (800025c <BUTTON_LowLevelManager+0x110>)
 80001b6:	2101      	movs	r1, #1
 80001b8:	54d1      	strb	r1, [r2, r3]
        }
        break;
 80001ba:	e03a      	b.n	8000232 <BUTTON_LowLevelManager+0xe6>

      case BUTTON_NOT_PRESSED:
        if (currentStates[i] == GPIO_BUTTON_PRESSED)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	3308      	adds	r3, #8
 80001c0:	443b      	add	r3, r7
 80001c2:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d135      	bne.n	8000236 <BUTTON_LowLevelManager+0xea>
        {
          buttonState[i] = BUTTON_WAIT_DEBOUNCE;
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	4a23      	ldr	r2, [pc, #140]	@ (800025c <BUTTON_LowLevelManager+0x110>)
 80001ce:	2102      	movs	r1, #2
 80001d0:	54d1      	strb	r1, [r2, r3]
          debounceCounter[i] = 0;
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	4a22      	ldr	r2, [pc, #136]	@ (8000260 <BUTTON_LowLevelManager+0x114>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        break;
 80001dc:	e02b      	b.n	8000236 <BUTTON_LowLevelManager+0xea>

      case BUTTON_WAIT_DEBOUNCE:
        if (debounceCounter[i] == DEBOUNCE_TIME_MS)
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000260 <BUTTON_LowLevelManager+0x114>)
 80001e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001e6:	2b32      	cmp	r3, #50	@ 0x32
 80001e8:	d127      	bne.n	800023a <BUTTON_LowLevelManager+0xee>
        {
          if (currentStates[i] == GPIO_BUTTON_PRESSED)
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	3308      	adds	r3, #8
 80001ee:	443b      	add	r3, r7
 80001f0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d104      	bne.n	8000202 <BUTTON_LowLevelManager+0xb6>
          {
            buttonState[i] = BUTTON_PRESSED;
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	4a18      	ldr	r2, [pc, #96]	@ (800025c <BUTTON_LowLevelManager+0x110>)
 80001fc:	2103      	movs	r1, #3
 80001fe:	54d1      	strb	r1, [r2, r3]
          else
          {
            buttonState[i] = BUTTON_NOT_PRESSED;
          }
        }
        break;
 8000200:	e01b      	b.n	800023a <BUTTON_LowLevelManager+0xee>
            buttonState[i] = BUTTON_NOT_PRESSED;
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	4a15      	ldr	r2, [pc, #84]	@ (800025c <BUTTON_LowLevelManager+0x110>)
 8000206:	2101      	movs	r1, #1
 8000208:	54d1      	strb	r1, [r2, r3]
        break;
 800020a:	e016      	b.n	800023a <BUTTON_LowLevelManager+0xee>

      case BUTTON_PRESSED:
        if (currentStates[i] == GPIO_BUTTON_NOT_PRESSED)
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	3308      	adds	r3, #8
 8000210:	443b      	add	r3, r7
 8000212:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8000216:	2b01      	cmp	r3, #1
 8000218:	d111      	bne.n	800023e <BUTTON_LowLevelManager+0xf2>
        {
          buttonState[i] = BUTTON_WAIT_DEBOUNCE;
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	4a0f      	ldr	r2, [pc, #60]	@ (800025c <BUTTON_LowLevelManager+0x110>)
 800021e:	2102      	movs	r1, #2
 8000220:	54d1      	strb	r1, [r2, r3]
          debounceCounter[i] = 0;
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	4a0e      	ldr	r2, [pc, #56]	@ (8000260 <BUTTON_LowLevelManager+0x114>)
 8000226:	2100      	movs	r1, #0
 8000228:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        break;
 800022c:	e007      	b.n	800023e <BUTTON_LowLevelManager+0xf2>

      default:
        break;
 800022e:	bf00      	nop
 8000230:	e006      	b.n	8000240 <BUTTON_LowLevelManager+0xf4>
        break;
 8000232:	bf00      	nop
 8000234:	e004      	b.n	8000240 <BUTTON_LowLevelManager+0xf4>
        break;
 8000236:	bf00      	nop
 8000238:	e002      	b.n	8000240 <BUTTON_LowLevelManager+0xf4>
        break;
 800023a:	bf00      	nop
 800023c:	e000      	b.n	8000240 <BUTTON_LowLevelManager+0xf4>
        break;
 800023e:	bf00      	nop
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	3301      	adds	r3, #1
 8000244:	71fb      	strb	r3, [r7, #7]
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2b02      	cmp	r3, #2
 800024a:	d985      	bls.n	8000158 <BUTTON_LowLevelManager+0xc>
    }
  }
}
 800024c:	bf00      	nop
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bd90      	pop	{r4, r7, pc}
 8000256:	bf00      	nop
 8000258:	20000000 	.word	0x20000000
 800025c:	20000060 	.word	0x20000060
 8000260:	20000048 	.word	0x20000048

08000264 <BUTTON_HighLevelManager>:



/******************************************************************************/
void BUTTON_HighLevelManager()
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800026a:	2300      	movs	r3, #0
 800026c:	71fb      	strb	r3, [r7, #7]
 800026e:	e041      	b.n	80002f4 <BUTTON_HighLevelManager+0x90>
  {
    if (buttonActions[i] == BUTTON_NONE)
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	4a25      	ldr	r2, [pc, #148]	@ (8000308 <BUTTON_HighLevelManager+0xa4>)
 8000274:	5cd3      	ldrb	r3, [r2, r3]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d121      	bne.n	80002be <BUTTON_HighLevelManager+0x5a>
    {
      if (waitButtonRelease[i] == 0)
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	4a23      	ldr	r2, [pc, #140]	@ (800030c <BUTTON_HighLevelManager+0xa8>)
 800027e:	5cd3      	ldrb	r3, [r2, r3]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d109      	bne.n	8000298 <BUTTON_HighLevelManager+0x34>
      {
        if (buttonState[i] == BUTTON_PRESSED)
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	4a22      	ldr	r2, [pc, #136]	@ (8000310 <BUTTON_HighLevelManager+0xac>)
 8000288:	5cd3      	ldrb	r3, [r2, r3]
 800028a:	2b03      	cmp	r3, #3
 800028c:	d117      	bne.n	80002be <BUTTON_HighLevelManager+0x5a>
        {
          waitButtonRelease[i] = 1;
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	4a1e      	ldr	r2, [pc, #120]	@ (800030c <BUTTON_HighLevelManager+0xa8>)
 8000292:	2101      	movs	r1, #1
 8000294:	54d1      	strb	r1, [r2, r3]
 8000296:	e012      	b.n	80002be <BUTTON_HighLevelManager+0x5a>
        }
      }
      else
      {
        if (buttonState[i] == BUTTON_NOT_PRESSED)
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	4a1d      	ldr	r2, [pc, #116]	@ (8000310 <BUTTON_HighLevelManager+0xac>)
 800029c:	5cd3      	ldrb	r3, [r2, r3]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d10d      	bne.n	80002be <BUTTON_HighLevelManager+0x5a>
        {
          waitButtonRelease[i] = 0;
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	4a19      	ldr	r2, [pc, #100]	@ (800030c <BUTTON_HighLevelManager+0xa8>)
 80002a6:	2100      	movs	r1, #0
 80002a8:	54d1      	strb	r1, [r2, r3]

          if(buttonPressCounter[i] >= BUTTONS_SHORT_PRESS_MS)
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	4a19      	ldr	r2, [pc, #100]	@ (8000314 <BUTTON_HighLevelManager+0xb0>)
 80002ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002b2:	2b3b      	cmp	r3, #59	@ 0x3b
 80002b4:	d903      	bls.n	80002be <BUTTON_HighLevelManager+0x5a>
          {
        	  buttonActions[i] = BUTTON_SHORT_PRESS;
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	4a13      	ldr	r2, [pc, #76]	@ (8000308 <BUTTON_HighLevelManager+0xa4>)
 80002ba:	2101      	movs	r1, #1
 80002bc:	54d1      	strb	r1, [r2, r3]
          }
        }
      }
    }
    if (buttonPressCounter[i] >= BUTTONS_VERY_LONG_PRESS_MS)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	4a14      	ldr	r2, [pc, #80]	@ (8000314 <BUTTON_HighLevelManager+0xb0>)
 80002c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002c6:	f240 52db 	movw	r2, #1499	@ 0x5db
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d904      	bls.n	80002d8 <BUTTON_HighLevelManager+0x74>
    {
    	buttonActions[i] = BUTTON_VERY_LONG_PRESS;
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000308 <BUTTON_HighLevelManager+0xa4>)
 80002d2:	2103      	movs	r1, #3
 80002d4:	54d1      	strb	r1, [r2, r3]
 80002d6:	e00a      	b.n	80002ee <BUTTON_HighLevelManager+0x8a>
    }
    else
    {
    	if (buttonPressCounter[i] >= BUTTONS_LONG_PRESS_MS)
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	4a0e      	ldr	r2, [pc, #56]	@ (8000314 <BUTTON_HighLevelManager+0xb0>)
 80002dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002e0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80002e4:	d303      	bcc.n	80002ee <BUTTON_HighLevelManager+0x8a>
    	{
    		buttonActions[i] = BUTTON_LONG_PRESS;
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	4a07      	ldr	r2, [pc, #28]	@ (8000308 <BUTTON_HighLevelManager+0xa4>)
 80002ea:	2102      	movs	r1, #2
 80002ec:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	3301      	adds	r3, #1
 80002f2:	71fb      	strb	r3, [r7, #7]
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	2b02      	cmp	r3, #2
 80002f8:	d9ba      	bls.n	8000270 <BUTTON_HighLevelManager+0xc>
    	}
    }
  }
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	2000005c 	.word	0x2000005c
 800030c:	20000050 	.word	0x20000050
 8000310:	20000060 	.word	0x20000060
 8000314:	20000054 	.word	0x20000054

08000318 <BUTTON_Process>:



/******************************************************************************/
void BUTTON_Process()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  BUTTON_LowLevelManager();
 800031c:	f7ff ff16 	bl	800014c <BUTTON_LowLevelManager>
  BUTTON_HighLevelManager();
 8000320:	f7ff ffa0 	bl	8000264 <BUTTON_HighLevelManager>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}

08000328 <BUTTON_TimerProcess>:



/******************************************************************************/
void BUTTON_TimerProcess()
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800032e:	2300      	movs	r3, #0
 8000330:	71fb      	strb	r3, [r7, #7]
 8000332:	e025      	b.n	8000380 <BUTTON_TimerProcess+0x58>
  {
    if (debounceCounter[i] < DEBOUNCE_TIME_MS)
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	4a17      	ldr	r2, [pc, #92]	@ (8000394 <BUTTON_TimerProcess+0x6c>)
 8000338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800033c:	2b31      	cmp	r3, #49	@ 0x31
 800033e:	d808      	bhi.n	8000352 <BUTTON_TimerProcess+0x2a>
    {
      debounceCounter[i]++;
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	4a14      	ldr	r2, [pc, #80]	@ (8000394 <BUTTON_TimerProcess+0x6c>)
 8000344:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000348:	3201      	adds	r2, #1
 800034a:	b291      	uxth	r1, r2
 800034c:	4a11      	ldr	r2, [pc, #68]	@ (8000394 <BUTTON_TimerProcess+0x6c>)
 800034e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }

    if (waitButtonRelease[i] == 1)
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	4a10      	ldr	r2, [pc, #64]	@ (8000398 <BUTTON_TimerProcess+0x70>)
 8000356:	5cd3      	ldrb	r3, [r2, r3]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d109      	bne.n	8000370 <BUTTON_TimerProcess+0x48>
    {
      buttonPressCounter[i]++;
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	4a0f      	ldr	r2, [pc, #60]	@ (800039c <BUTTON_TimerProcess+0x74>)
 8000360:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000364:	3201      	adds	r2, #1
 8000366:	b291      	uxth	r1, r2
 8000368:	4a0c      	ldr	r2, [pc, #48]	@ (800039c <BUTTON_TimerProcess+0x74>)
 800036a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800036e:	e004      	b.n	800037a <BUTTON_TimerProcess+0x52>
    }
    else
    {
      buttonPressCounter[i] = 0;
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	4a0a      	ldr	r2, [pc, #40]	@ (800039c <BUTTON_TimerProcess+0x74>)
 8000374:	2100      	movs	r1, #0
 8000376:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	3301      	adds	r3, #1
 800037e:	71fb      	strb	r3, [r7, #7]
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	2b02      	cmp	r3, #2
 8000384:	d9d6      	bls.n	8000334 <BUTTON_TimerProcess+0xc>
    }
  }
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	20000048 	.word	0x20000048
 8000398:	20000050 	.word	0x20000050
 800039c:	20000054 	.word	0x20000054

080003a0 <BUTTON_GetAction>:



/******************************************************************************/
ButtonAction BUTTON_GetAction(uint8_t index)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
  return buttonActions[index];
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	4a03      	ldr	r2, [pc, #12]	@ (80003bc <BUTTON_GetAction+0x1c>)
 80003ae:	5cd3      	ldrb	r3, [r2, r3]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	2000005c 	.word	0x2000005c

080003c0 <BUTTON_ResetActions>:



/******************************************************************************/
void BUTTON_ResetActions()
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 80003c6:	2300      	movs	r3, #0
 80003c8:	71fb      	strb	r3, [r7, #7]
 80003ca:	e006      	b.n	80003da <BUTTON_ResetActions+0x1a>
  {
    buttonActions[i] = BUTTON_NONE;
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	4a07      	ldr	r2, [pc, #28]	@ (80003ec <BUTTON_ResetActions+0x2c>)
 80003d0:	2100      	movs	r1, #0
 80003d2:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < BUTTONS_NUM; i++)
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	3301      	adds	r3, #1
 80003d8:	71fb      	strb	r3, [r7, #7]
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2b02      	cmp	r3, #2
 80003de:	d9f5      	bls.n	80003cc <BUTTON_ResetActions+0xc>
  }
}
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	2000005c 	.word	0x2000005c

080003f0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000404:	4b4c      	ldr	r3, [pc, #304]	@ (8000538 <MX_GPIO_Init+0x148>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a4b      	ldr	r2, [pc, #300]	@ (8000538 <MX_GPIO_Init+0x148>)
 800040a:	f043 0310 	orr.w	r3, r3, #16
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b49      	ldr	r3, [pc, #292]	@ (8000538 <MX_GPIO_Init+0x148>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0310 	and.w	r3, r3, #16
 8000418:	60fb      	str	r3, [r7, #12]
 800041a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800041c:	4b46      	ldr	r3, [pc, #280]	@ (8000538 <MX_GPIO_Init+0x148>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a45      	ldr	r2, [pc, #276]	@ (8000538 <MX_GPIO_Init+0x148>)
 8000422:	f043 0320 	orr.w	r3, r3, #32
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b43      	ldr	r3, [pc, #268]	@ (8000538 <MX_GPIO_Init+0x148>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0320 	and.w	r3, r3, #32
 8000430:	60bb      	str	r3, [r7, #8]
 8000432:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000434:	4b40      	ldr	r3, [pc, #256]	@ (8000538 <MX_GPIO_Init+0x148>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a3f      	ldr	r2, [pc, #252]	@ (8000538 <MX_GPIO_Init+0x148>)
 800043a:	f043 0304 	orr.w	r3, r3, #4
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b3d      	ldr	r3, [pc, #244]	@ (8000538 <MX_GPIO_Init+0x148>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0304 	and.w	r3, r3, #4
 8000448:	607b      	str	r3, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044c:	4b3a      	ldr	r3, [pc, #232]	@ (8000538 <MX_GPIO_Init+0x148>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a39      	ldr	r2, [pc, #228]	@ (8000538 <MX_GPIO_Init+0x148>)
 8000452:	f043 0308 	orr.w	r3, r3, #8
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b37      	ldr	r3, [pc, #220]	@ (8000538 <MX_GPIO_Init+0x148>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0308 	and.w	r3, r3, #8
 8000460:	603b      	str	r3, [r7, #0]
 8000462:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DATA_Pin|CLOCK_PERIPH_Pin|L6_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 4103 	mov.w	r1, #33536	@ 0x8300
 800046a:	4834      	ldr	r0, [pc, #208]	@ (800053c <MX_GPIO_Init+0x14c>)
 800046c:	f001 fdd0 	bl	8002010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L5_Pin|L4_Pin|L3_Pin|L2_Pin
 8000470:	2200      	movs	r2, #0
 8000472:	21f8      	movs	r1, #248	@ 0xf8
 8000474:	4832      	ldr	r0, [pc, #200]	@ (8000540 <MX_GPIO_Init+0x150>)
 8000476:	f001 fdcb 	bl	8002010 <HAL_GPIO_WritePin>
                          |L1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800047a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000480:	2303      	movs	r3, #3
 8000482:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	482e      	ldr	r0, [pc, #184]	@ (8000544 <MX_GPIO_Init+0x154>)
 800048c:	f001 fb32 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000490:	f641 43ff 	movw	r3, #7423	@ 0x1cff
 8000494:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000496:	2303      	movs	r3, #3
 8000498:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	4619      	mov	r1, r3
 80004a0:	4826      	ldr	r0, [pc, #152]	@ (800053c <MX_GPIO_Init+0x14c>)
 80004a2:	f001 fb27 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80004a6:	f648 7307 	movw	r3, #36615	@ 0x8f07
 80004aa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ac:	2303      	movs	r3, #3
 80004ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	4822      	ldr	r0, [pc, #136]	@ (8000540 <MX_GPIO_Init+0x150>)
 80004b8:	f001 fb1c 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_LEFT_Pin|BUTTON_MIDDLE_Pin|BUTTON_RIGHT_Pin;
 80004bc:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80004c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004c6:	2301      	movs	r3, #1
 80004c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ca:	f107 0310 	add.w	r3, r7, #16
 80004ce:	4619      	mov	r1, r3
 80004d0:	481b      	ldr	r0, [pc, #108]	@ (8000540 <MX_GPIO_Init+0x150>)
 80004d2:	f001 fb0f 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DATA_Pin|CLOCK_PERIPH_Pin;
 80004d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80004da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	2301      	movs	r3, #1
 80004de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004e0:	2302      	movs	r3, #2
 80004e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	2302      	movs	r3, #2
 80004e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	4813      	ldr	r0, [pc, #76]	@ (800053c <MX_GPIO_Init+0x14c>)
 80004f0:	f001 fb00 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L6_Pin;
 80004f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000502:	2303      	movs	r3, #3
 8000504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L6_GPIO_Port, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	480b      	ldr	r0, [pc, #44]	@ (800053c <MX_GPIO_Init+0x14c>)
 800050e:	f001 faf1 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = L5_Pin|L4_Pin|L3_Pin|L2_Pin
 8000512:	23f8      	movs	r3, #248	@ 0xf8
 8000514:	613b      	str	r3, [r7, #16]
                          |L1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051e:	2303      	movs	r3, #3
 8000520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000522:	f107 0310 	add.w	r3, r7, #16
 8000526:	4619      	mov	r1, r3
 8000528:	4805      	ldr	r0, [pc, #20]	@ (8000540 <MX_GPIO_Init+0x150>)
 800052a:	f001 fae3 	bl	8001af4 <HAL_GPIO_Init>

}
 800052e:	bf00      	nop
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000
 800053c:	40010800 	.word	0x40010800
 8000540:	40010c00 	.word	0x40010c00
 8000544:	40011000 	.word	0x40011000

08000548 <clockStart>:

#include "Clock.h"

//set default time and date
void clockStart()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2100      	movs	r1, #0
 8000552:	460a      	mov	r2, r1
 8000554:	801a      	strh	r2, [r3, #0]
 8000556:	460a      	mov	r2, r1
 8000558:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef sDate = {0};
 800055a:	2300      	movs	r3, #0
 800055c:	603b      	str	r3, [r7, #0]
	sTime.Hours = 17;
 800055e:	2311      	movs	r3, #17
 8000560:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 59;
 8000562:	233b      	movs	r3, #59	@ 0x3b
 8000564:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 45;
 8000566:	232d      	movs	r3, #45	@ 0x2d
 8000568:	71bb      	strb	r3, [r7, #6]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	4619      	mov	r1, r3
 8000570:	480f      	ldr	r0, [pc, #60]	@ (80005b0 <clockStart+0x68>)
 8000572:	f002 fdcb 	bl	800310c <HAL_RTC_SetTime>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <clockStart+0x38>
	{
		Error_Handler();
 800057c:	f000 ff18 	bl	80013b0 <Error_Handler>
	}

	sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000580:	2303      	movs	r3, #3
 8000582:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JULY;
 8000584:	2307      	movs	r3, #7
 8000586:	707b      	strb	r3, [r7, #1]
	sDate.Date = 31;
 8000588:	231f      	movs	r3, #31
 800058a:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 24;
 800058c:	2318      	movs	r3, #24
 800058e:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	4619      	mov	r1, r3
 8000596:	4806      	ldr	r0, [pc, #24]	@ (80005b0 <clockStart+0x68>)
 8000598:	f002 ff84 	bl	80034a4 <HAL_RTC_SetDate>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <clockStart+0x5e>
	{
		Error_Handler();
 80005a2:	f000 ff05 	bl	80013b0 <Error_Handler>
	}
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200002c0 	.word	0x200002c0

080005b4 <clockControl>:

//check time and call setfunction
void clockControl()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
	 RTC_DateTypeDef getDate = {0};
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
	 RTC_TimeTypeDef getTime = {0};
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2100      	movs	r1, #0
 80005c2:	460a      	mov	r2, r1
 80005c4:	801a      	strh	r2, [r3, #0]
 80005c6:	460a      	mov	r2, r1
 80005c8:	709a      	strb	r2, [r3, #2]

	 if (HAL_RTC_GetTime(&hrtc, &getTime, RTC_FORMAT_BIN) != HAL_OK)
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	4619      	mov	r1, r3
 80005d0:	48ac      	ldr	r0, [pc, #688]	@ (8000884 <clockControl+0x2d0>)
 80005d2:	f002 fe81 	bl	80032d8 <HAL_RTC_GetTime>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <clockControl+0x2c>
	 {
		 Error_Handler();
 80005dc:	f000 fee8 	bl	80013b0 <Error_Handler>
	 }

	 if (HAL_RTC_GetDate(&hrtc, &getDate, RTC_FORMAT_BIN) != HAL_OK)
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	2200      	movs	r2, #0
 80005e6:	4619      	mov	r1, r3
 80005e8:	48a6      	ldr	r0, [pc, #664]	@ (8000884 <clockControl+0x2d0>)
 80005ea:	f003 f879 	bl	80036e0 <HAL_RTC_GetDate>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <clockControl+0x44>
	 {
		 Error_Handler();
 80005f4:	f000 fedc 	bl	80013b0 <Error_Handler>
	 }
	 for(int i = 0; i<11; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e03e      	b.n	800067c <clockControl+0xc8>
	 {
		 tenHour[i] 	= 0;
 80005fe:	4aa2      	ldr	r2, [pc, #648]	@ (8000888 <clockControl+0x2d4>)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2100      	movs	r1, #0
 8000604:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 oneHour[i] 	= 0;
 8000608:	4aa0      	ldr	r2, [pc, #640]	@ (800088c <clockControl+0x2d8>)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2100      	movs	r1, #0
 800060e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 tenMin[i] 		= 0;
 8000612:	4a9f      	ldr	r2, [pc, #636]	@ (8000890 <clockControl+0x2dc>)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2100      	movs	r1, #0
 8000618:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 oneMin[i] 		= 0;
 800061c:	4a9d      	ldr	r2, [pc, #628]	@ (8000894 <clockControl+0x2e0>)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2100      	movs	r1, #0
 8000622:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 tenSec[i] 		= 0;
 8000626:	4a9c      	ldr	r2, [pc, #624]	@ (8000898 <clockControl+0x2e4>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2100      	movs	r1, #0
 800062c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 oneSec[i] 		= 0;
 8000630:	4a9a      	ldr	r2, [pc, #616]	@ (800089c <clockControl+0x2e8>)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	2100      	movs	r1, #0
 8000636:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		 tenDay[i] 		= 0;
 800063a:	4a99      	ldr	r2, [pc, #612]	@ (80008a0 <clockControl+0x2ec>)
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	2100      	movs	r1, #0
 8000640:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 oneDay[i] 		= 0;
 8000644:	4a97      	ldr	r2, [pc, #604]	@ (80008a4 <clockControl+0x2f0>)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2100      	movs	r1, #0
 800064a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 tenMonth[i] 	= 0;
 800064e:	4a96      	ldr	r2, [pc, #600]	@ (80008a8 <clockControl+0x2f4>)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2100      	movs	r1, #0
 8000654:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 oneMonth[i] 	= 0;
 8000658:	4a94      	ldr	r2, [pc, #592]	@ (80008ac <clockControl+0x2f8>)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2100      	movs	r1, #0
 800065e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 tenYear[i] 	= 0;
 8000662:	4a93      	ldr	r2, [pc, #588]	@ (80008b0 <clockControl+0x2fc>)
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2100      	movs	r1, #0
 8000668:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 oneYear[i] 	= 0;
 800066c:	4a91      	ldr	r2, [pc, #580]	@ (80008b4 <clockControl+0x300>)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	2100      	movs	r1, #0
 8000672:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 for(int i = 0; i<11; i++)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	3301      	adds	r3, #1
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2b0a      	cmp	r3, #10
 8000680:	ddbd      	ble.n	80005fe <clockControl+0x4a>
	 }

	 tenHour[(getTime.Hours / 10)]		= 1;
 8000682:	793b      	ldrb	r3, [r7, #4]
 8000684:	4a8c      	ldr	r2, [pc, #560]	@ (80008b8 <clockControl+0x304>)
 8000686:	fba2 2303 	umull	r2, r3, r2, r3
 800068a:	08db      	lsrs	r3, r3, #3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4619      	mov	r1, r3
 8000690:	4b7d      	ldr	r3, [pc, #500]	@ (8000888 <clockControl+0x2d4>)
 8000692:	2201      	movs	r2, #1
 8000694:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	 oneHour[(getTime.Hours % 10)]	 	= 1;
 8000698:	793a      	ldrb	r2, [r7, #4]
 800069a:	4b87      	ldr	r3, [pc, #540]	@ (80008b8 <clockControl+0x304>)
 800069c:	fba3 1302 	umull	r1, r3, r3, r2
 80006a0:	08d9      	lsrs	r1, r3, #3
 80006a2:	460b      	mov	r3, r1
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	440b      	add	r3, r1
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	4619      	mov	r1, r3
 80006b0:	4b76      	ldr	r3, [pc, #472]	@ (800088c <clockControl+0x2d8>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	 tenMin[(getTime.Minutes / 10)] 	= 1;
 80006b8:	797b      	ldrb	r3, [r7, #5]
 80006ba:	4a7f      	ldr	r2, [pc, #508]	@ (80008b8 <clockControl+0x304>)
 80006bc:	fba2 2303 	umull	r2, r3, r2, r3
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4619      	mov	r1, r3
 80006c6:	4b72      	ldr	r3, [pc, #456]	@ (8000890 <clockControl+0x2dc>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	 oneMin[(getTime.Minutes % 10)] 	= 1;
 80006ce:	797a      	ldrb	r2, [r7, #5]
 80006d0:	4b79      	ldr	r3, [pc, #484]	@ (80008b8 <clockControl+0x304>)
 80006d2:	fba3 1302 	umull	r1, r3, r3, r2
 80006d6:	08d9      	lsrs	r1, r3, #3
 80006d8:	460b      	mov	r3, r1
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	440b      	add	r3, r1
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4619      	mov	r1, r3
 80006e6:	4b6b      	ldr	r3, [pc, #428]	@ (8000894 <clockControl+0x2e0>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	 tenSec[(getTime.Seconds / 10)] 	= 1;
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	4a71      	ldr	r2, [pc, #452]	@ (80008b8 <clockControl+0x304>)
 80006f2:	fba2 2303 	umull	r2, r3, r2, r3
 80006f6:	08db      	lsrs	r3, r3, #3
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	4b66      	ldr	r3, [pc, #408]	@ (8000898 <clockControl+0x2e4>)
 80006fe:	2201      	movs	r2, #1
 8000700:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	 oneSec[(getTime.Seconds % 10)] 	= 1;
 8000704:	79ba      	ldrb	r2, [r7, #6]
 8000706:	4b6c      	ldr	r3, [pc, #432]	@ (80008b8 <clockControl+0x304>)
 8000708:	fba3 1302 	umull	r1, r3, r3, r2
 800070c:	08d9      	lsrs	r1, r3, #3
 800070e:	460b      	mov	r3, r1
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	440b      	add	r3, r1
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4619      	mov	r1, r3
 800071c:	4b5f      	ldr	r3, [pc, #380]	@ (800089c <clockControl+0x2e8>)
 800071e:	2201      	movs	r2, #1
 8000720:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	 tenDay[(getDate.Date / 10)]		= 1;
 8000724:	7abb      	ldrb	r3, [r7, #10]
 8000726:	4a64      	ldr	r2, [pc, #400]	@ (80008b8 <clockControl+0x304>)
 8000728:	fba2 2303 	umull	r2, r3, r2, r3
 800072c:	08db      	lsrs	r3, r3, #3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4619      	mov	r1, r3
 8000732:	4b5b      	ldr	r3, [pc, #364]	@ (80008a0 <clockControl+0x2ec>)
 8000734:	2201      	movs	r2, #1
 8000736:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	 oneDay[(getDate.Date % 10)] 		= 1;
 800073a:	7aba      	ldrb	r2, [r7, #10]
 800073c:	4b5e      	ldr	r3, [pc, #376]	@ (80008b8 <clockControl+0x304>)
 800073e:	fba3 1302 	umull	r1, r3, r3, r2
 8000742:	08d9      	lsrs	r1, r3, #3
 8000744:	460b      	mov	r3, r1
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	440b      	add	r3, r1
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	4b54      	ldr	r3, [pc, #336]	@ (80008a4 <clockControl+0x2f0>)
 8000754:	2201      	movs	r2, #1
 8000756:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	 tenMonth[(getDate.Month / 10)] 	= 1;
 800075a:	7a7b      	ldrb	r3, [r7, #9]
 800075c:	4a56      	ldr	r2, [pc, #344]	@ (80008b8 <clockControl+0x304>)
 800075e:	fba2 2303 	umull	r2, r3, r2, r3
 8000762:	08db      	lsrs	r3, r3, #3
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4619      	mov	r1, r3
 8000768:	4b4f      	ldr	r3, [pc, #316]	@ (80008a8 <clockControl+0x2f4>)
 800076a:	2201      	movs	r2, #1
 800076c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	 oneMonth[(getDate.Month % 10)] 	= 1;
 8000770:	7a7a      	ldrb	r2, [r7, #9]
 8000772:	4b51      	ldr	r3, [pc, #324]	@ (80008b8 <clockControl+0x304>)
 8000774:	fba3 1302 	umull	r1, r3, r3, r2
 8000778:	08d9      	lsrs	r1, r3, #3
 800077a:	460b      	mov	r3, r1
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	440b      	add	r3, r1
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4619      	mov	r1, r3
 8000788:	4b48      	ldr	r3, [pc, #288]	@ (80008ac <clockControl+0x2f8>)
 800078a:	2201      	movs	r2, #1
 800078c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	 tenYear[(getDate.Year / 10)] 		= 1;
 8000790:	7afb      	ldrb	r3, [r7, #11]
 8000792:	4a49      	ldr	r2, [pc, #292]	@ (80008b8 <clockControl+0x304>)
 8000794:	fba2 2303 	umull	r2, r3, r2, r3
 8000798:	08db      	lsrs	r3, r3, #3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	4619      	mov	r1, r3
 800079e:	4b44      	ldr	r3, [pc, #272]	@ (80008b0 <clockControl+0x2fc>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	 oneYear[(getDate.Year % 10)] 		= 1;
 80007a6:	7afa      	ldrb	r2, [r7, #11]
 80007a8:	4b43      	ldr	r3, [pc, #268]	@ (80008b8 <clockControl+0x304>)
 80007aa:	fba3 1302 	umull	r1, r3, r3, r2
 80007ae:	08d9      	lsrs	r1, r3, #3
 80007b0:	460b      	mov	r3, r1
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	440b      	add	r3, r1
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	4619      	mov	r1, r3
 80007be:	4b3d      	ldr	r3, [pc, #244]	@ (80008b4 <clockControl+0x300>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	 if (isPowerOn)
 80007c6:	4b3d      	ldr	r3, [pc, #244]	@ (80008bc <clockControl+0x308>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f000 80b0 	beq.w	8000930 <clockControl+0x37c>
	 {
		 if (isSettingsOn)
 80007d0:	4b3b      	ldr	r3, [pc, #236]	@ (80008c0 <clockControl+0x30c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	f000 808f 	beq.w	80008f8 <clockControl+0x344>
		 {
			 if ((unitChoose == 0 && currentUnit < 2) || (unitChoose == 1 && currentUnit > 1 && currentUnit < 4) \
 80007da:	4b3a      	ldr	r3, [pc, #232]	@ (80008c4 <clockControl+0x310>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d103      	bne.n	80007ea <clockControl+0x236>
 80007e2:	4b39      	ldr	r3, [pc, #228]	@ (80008c8 <clockControl+0x314>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	dd13      	ble.n	8000812 <clockControl+0x25e>
 80007ea:	4b36      	ldr	r3, [pc, #216]	@ (80008c4 <clockControl+0x310>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d107      	bne.n	8000802 <clockControl+0x24e>
 80007f2:	4b35      	ldr	r3, [pc, #212]	@ (80008c8 <clockControl+0x314>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	dd03      	ble.n	8000802 <clockControl+0x24e>
 80007fa:	4b33      	ldr	r3, [pc, #204]	@ (80008c8 <clockControl+0x314>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	dd07      	ble.n	8000812 <clockControl+0x25e>
														 || (unitChoose == 2 && currentUnit > 3))
 8000802:	4b30      	ldr	r3, [pc, #192]	@ (80008c4 <clockControl+0x310>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d166      	bne.n	80008d8 <clockControl+0x324>
 800080a:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <clockControl+0x314>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b03      	cmp	r3, #3
 8000810:	dd62      	ble.n	80008d8 <clockControl+0x324>
			 {
				 if (period < 120)
 8000812:	4b2e      	ldr	r3, [pc, #184]	@ (80008cc <clockControl+0x318>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b77      	cmp	r3, #119	@ 0x77
 8000818:	dc1b      	bgt.n	8000852 <clockControl+0x29e>
				 {
					 if (period > 39)
 800081a:	4b2c      	ldr	r3, [pc, #176]	@ (80008cc <clockControl+0x318>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b27      	cmp	r3, #39	@ 0x27
 8000820:	dd0f      	ble.n	8000842 <clockControl+0x28e>
					 {
						 if (screenChoose == 0) timeChoose(currentUnit);
 8000822:	4b2b      	ldr	r3, [pc, #172]	@ (80008d0 <clockControl+0x31c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d105      	bne.n	8000836 <clockControl+0x282>
 800082a:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <clockControl+0x314>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f908 	bl	8000a44 <timeChoose>
 8000834:	e007      	b.n	8000846 <clockControl+0x292>
						 else dateChoose(currentUnit);
 8000836:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <clockControl+0x314>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f882 	bl	8000944 <dateChoose>
 8000840:	e001      	b.n	8000846 <clockControl+0x292>
					 }
					 else
					 {
						 resetTube();
 8000842:	f000 f97f 	bl	8000b44 <resetTube>
					 }
					 period++;
 8000846:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <clockControl+0x318>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	4a1f      	ldr	r2, [pc, #124]	@ (80008cc <clockControl+0x318>)
 800084e:	6013      	str	r3, [r2, #0]
				 if (period < 120)
 8000850:	e061      	b.n	8000916 <clockControl+0x362>
				 }
				 else {
					 settingsFlag--;
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <clockControl+0x320>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3b01      	subs	r3, #1
 8000858:	4a1e      	ldr	r2, [pc, #120]	@ (80008d4 <clockControl+0x320>)
 800085a:	6013      	str	r3, [r2, #0]
					 period = 0;
 800085c:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <clockControl+0x318>)
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
					 if (screenChoose == 0) timeChoose(currentUnit);
 8000862:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <clockControl+0x31c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d105      	bne.n	8000876 <clockControl+0x2c2>
 800086a:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <clockControl+0x314>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f8e8 	bl	8000a44 <timeChoose>
				 if (period < 120)
 8000874:	e04f      	b.n	8000916 <clockControl+0x362>
					 else dateChoose(currentUnit);
 8000876:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <clockControl+0x314>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f862 	bl	8000944 <dateChoose>
				 if (period < 120)
 8000880:	e049      	b.n	8000916 <clockControl+0x362>
 8000882:	bf00      	nop
 8000884:	200002c0 	.word	0x200002c0
 8000888:	2000006c 	.word	0x2000006c
 800088c:	2000009c 	.word	0x2000009c
 8000890:	200000cc 	.word	0x200000cc
 8000894:	200000fc 	.word	0x200000fc
 8000898:	2000012c 	.word	0x2000012c
 800089c:	2000015c 	.word	0x2000015c
 80008a0:	2000018c 	.word	0x2000018c
 80008a4:	200001bc 	.word	0x200001bc
 80008a8:	200001ec 	.word	0x200001ec
 80008ac:	2000021c 	.word	0x2000021c
 80008b0:	2000024c 	.word	0x2000024c
 80008b4:	2000027c 	.word	0x2000027c
 80008b8:	cccccccd 	.word	0xcccccccd
 80008bc:	2000001c 	.word	0x2000001c
 80008c0:	200002b4 	.word	0x200002b4
 80008c4:	200002b0 	.word	0x200002b0
 80008c8:	20000064 	.word	0x20000064
 80008cc:	20000068 	.word	0x20000068
 80008d0:	200002ac 	.word	0x200002ac
 80008d4:	200002b8 	.word	0x200002b8
				 }
			 }
			 else
			 {
				 if (screenChoose == 0) timeChoose(currentUnit);
 80008d8:	4b18      	ldr	r3, [pc, #96]	@ (800093c <clockControl+0x388>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d105      	bne.n	80008ec <clockControl+0x338>
 80008e0:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <clockControl+0x38c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f8ad 	bl	8000a44 <timeChoose>
 80008ea:	e014      	b.n	8000916 <clockControl+0x362>
				 else dateChoose(currentUnit);
 80008ec:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <clockControl+0x38c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 f827 	bl	8000944 <dateChoose>
 80008f6:	e00e      	b.n	8000916 <clockControl+0x362>
			 }
		 }
		 else
		 {
			 if (screenChoose == 0) timeChoose(currentUnit);
 80008f8:	4b10      	ldr	r3, [pc, #64]	@ (800093c <clockControl+0x388>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d105      	bne.n	800090c <clockControl+0x358>
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <clockControl+0x38c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f89d 	bl	8000a44 <timeChoose>
 800090a:	e004      	b.n	8000916 <clockControl+0x362>
			 else dateChoose(currentUnit);
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <clockControl+0x38c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f817 	bl	8000944 <dateChoose>
		 }
		 currentUnit++;
 8000916:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <clockControl+0x38c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a08      	ldr	r2, [pc, #32]	@ (8000940 <clockControl+0x38c>)
 800091e:	6013      	str	r3, [r2, #0]
		 if (currentUnit >= 6) currentUnit = 0;
 8000920:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <clockControl+0x38c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b05      	cmp	r3, #5
 8000926:	dd05      	ble.n	8000934 <clockControl+0x380>
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <clockControl+0x38c>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
	 }
	 else resetTube();

}
 800092e:	e001      	b.n	8000934 <clockControl+0x380>
	 else resetTube();
 8000930:	f000 f908 	bl	8000b44 <resetTube>
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200002ac 	.word	0x200002ac
 8000940:	20000064 	.word	0x20000064

08000944 <dateChoose>:

//call setdata function and choose tube for calendar
void dateChoose(int unit)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	switch (unit)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b05      	cmp	r3, #5
 8000950:	d864      	bhi.n	8000a1c <dateChoose+0xd8>
 8000952:	a201      	add	r2, pc, #4	@ (adr r2, 8000958 <dateChoose+0x14>)
 8000954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000958:	08000971 	.word	0x08000971
 800095c:	0800098f 	.word	0x0800098f
 8000960:	080009ab 	.word	0x080009ab
 8000964:	080009c7 	.word	0x080009c7
 8000968:	080009e3 	.word	0x080009e3
 800096c:	080009ff 	.word	0x080009ff
	{
	case 0:
		dataSend(tenDay);
 8000970:	482c      	ldr	r0, [pc, #176]	@ (8000a24 <dateChoose+0xe0>)
 8000972:	f000 f90f 	bl	8000b94 <dataSend>
		HAL_GPIO_WritePin(L6_GPIO_Port, L6_Pin, RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800097c:	482a      	ldr	r0, [pc, #168]	@ (8000a28 <dateChoose+0xe4>)
 800097e:	f001 fb47 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, SET);
 8000982:	2201      	movs	r2, #1
 8000984:	2180      	movs	r1, #128	@ 0x80
 8000986:	4829      	ldr	r0, [pc, #164]	@ (8000a2c <dateChoose+0xe8>)
 8000988:	f001 fb42 	bl	8002010 <HAL_GPIO_WritePin>
		break;
 800098c:	e046      	b.n	8000a1c <dateChoose+0xd8>

	case 1:
		dataSend(oneDay);
 800098e:	4828      	ldr	r0, [pc, #160]	@ (8000a30 <dateChoose+0xec>)
 8000990:	f000 f900 	bl	8000b94 <dataSend>
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2180      	movs	r1, #128	@ 0x80
 8000998:	4824      	ldr	r0, [pc, #144]	@ (8000a2c <dateChoose+0xe8>)
 800099a:	f001 fb39 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2140      	movs	r1, #64	@ 0x40
 80009a2:	4822      	ldr	r0, [pc, #136]	@ (8000a2c <dateChoose+0xe8>)
 80009a4:	f001 fb34 	bl	8002010 <HAL_GPIO_WritePin>
		break;
 80009a8:	e038      	b.n	8000a1c <dateChoose+0xd8>

	case 2:
		dataSend(tenMonth);
 80009aa:	4822      	ldr	r0, [pc, #136]	@ (8000a34 <dateChoose+0xf0>)
 80009ac:	f000 f8f2 	bl	8000b94 <dataSend>
		HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2140      	movs	r1, #64	@ 0x40
 80009b4:	481d      	ldr	r0, [pc, #116]	@ (8000a2c <dateChoose+0xe8>)
 80009b6:	f001 fb2b 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin, SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2120      	movs	r1, #32
 80009be:	481b      	ldr	r0, [pc, #108]	@ (8000a2c <dateChoose+0xe8>)
 80009c0:	f001 fb26 	bl	8002010 <HAL_GPIO_WritePin>
		break;
 80009c4:	e02a      	b.n	8000a1c <dateChoose+0xd8>

	case 3:
		dataSend(oneMonth);
 80009c6:	481c      	ldr	r0, [pc, #112]	@ (8000a38 <dateChoose+0xf4>)
 80009c8:	f000 f8e4 	bl	8000b94 <dataSend>
		HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin, RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2120      	movs	r1, #32
 80009d0:	4816      	ldr	r0, [pc, #88]	@ (8000a2c <dateChoose+0xe8>)
 80009d2:	f001 fb1d 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin, SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	2110      	movs	r1, #16
 80009da:	4814      	ldr	r0, [pc, #80]	@ (8000a2c <dateChoose+0xe8>)
 80009dc:	f001 fb18 	bl	8002010 <HAL_GPIO_WritePin>
		break;
 80009e0:	e01c      	b.n	8000a1c <dateChoose+0xd8>

	case 4:
		dataSend(tenYear);
 80009e2:	4816      	ldr	r0, [pc, #88]	@ (8000a3c <dateChoose+0xf8>)
 80009e4:	f000 f8d6 	bl	8000b94 <dataSend>
		HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin, RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2110      	movs	r1, #16
 80009ec:	480f      	ldr	r0, [pc, #60]	@ (8000a2c <dateChoose+0xe8>)
 80009ee:	f001 fb0f 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L5_GPIO_Port, L5_Pin, SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2108      	movs	r1, #8
 80009f6:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <dateChoose+0xe8>)
 80009f8:	f001 fb0a 	bl	8002010 <HAL_GPIO_WritePin>
		break;
 80009fc:	e00e      	b.n	8000a1c <dateChoose+0xd8>

	case 5:
		dataSend(oneYear);
 80009fe:	4810      	ldr	r0, [pc, #64]	@ (8000a40 <dateChoose+0xfc>)
 8000a00:	f000 f8c8 	bl	8000b94 <dataSend>
		HAL_GPIO_WritePin(L5_GPIO_Port, L5_Pin, RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2108      	movs	r1, #8
 8000a08:	4808      	ldr	r0, [pc, #32]	@ (8000a2c <dateChoose+0xe8>)
 8000a0a:	f001 fb01 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L6_GPIO_Port, L6_Pin, SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <dateChoose+0xe4>)
 8000a16:	f001 fafb 	bl	8002010 <HAL_GPIO_WritePin>
		break;
 8000a1a:	bf00      	nop
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000018c 	.word	0x2000018c
 8000a28:	40010800 	.word	0x40010800
 8000a2c:	40010c00 	.word	0x40010c00
 8000a30:	200001bc 	.word	0x200001bc
 8000a34:	200001ec 	.word	0x200001ec
 8000a38:	2000021c 	.word	0x2000021c
 8000a3c:	2000024c 	.word	0x2000024c
 8000a40:	2000027c 	.word	0x2000027c

08000a44 <timeChoose>:

//call setdata function and choose tube for clock
void timeChoose(int unit)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	switch (unit)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b05      	cmp	r3, #5
 8000a50:	d864      	bhi.n	8000b1c <timeChoose+0xd8>
 8000a52:	a201      	add	r2, pc, #4	@ (adr r2, 8000a58 <timeChoose+0x14>)
 8000a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a58:	08000a71 	.word	0x08000a71
 8000a5c:	08000a8f 	.word	0x08000a8f
 8000a60:	08000aab 	.word	0x08000aab
 8000a64:	08000ac7 	.word	0x08000ac7
 8000a68:	08000ae3 	.word	0x08000ae3
 8000a6c:	08000aff 	.word	0x08000aff
	{
	case 0:
		dataSend(tenHour);
 8000a70:	482c      	ldr	r0, [pc, #176]	@ (8000b24 <timeChoose+0xe0>)
 8000a72:	f000 f88f 	bl	8000b94 <dataSend>
		HAL_GPIO_WritePin(L6_GPIO_Port, L6_Pin, RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a7c:	482a      	ldr	r0, [pc, #168]	@ (8000b28 <timeChoose+0xe4>)
 8000a7e:	f001 fac7 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2180      	movs	r1, #128	@ 0x80
 8000a86:	4829      	ldr	r0, [pc, #164]	@ (8000b2c <timeChoose+0xe8>)
 8000a88:	f001 fac2 	bl	8002010 <HAL_GPIO_WritePin>
		break;
 8000a8c:	e046      	b.n	8000b1c <timeChoose+0xd8>

	case 1:
		dataSend(oneHour);
 8000a8e:	4828      	ldr	r0, [pc, #160]	@ (8000b30 <timeChoose+0xec>)
 8000a90:	f000 f880 	bl	8000b94 <dataSend>
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2180      	movs	r1, #128	@ 0x80
 8000a98:	4824      	ldr	r0, [pc, #144]	@ (8000b2c <timeChoose+0xe8>)
 8000a9a:	f001 fab9 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2140      	movs	r1, #64	@ 0x40
 8000aa2:	4822      	ldr	r0, [pc, #136]	@ (8000b2c <timeChoose+0xe8>)
 8000aa4:	f001 fab4 	bl	8002010 <HAL_GPIO_WritePin>
		break;
 8000aa8:	e038      	b.n	8000b1c <timeChoose+0xd8>

	case 2:
		dataSend(tenMin);
 8000aaa:	4822      	ldr	r0, [pc, #136]	@ (8000b34 <timeChoose+0xf0>)
 8000aac:	f000 f872 	bl	8000b94 <dataSend>
		HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2140      	movs	r1, #64	@ 0x40
 8000ab4:	481d      	ldr	r0, [pc, #116]	@ (8000b2c <timeChoose+0xe8>)
 8000ab6:	f001 faab 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin, SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2120      	movs	r1, #32
 8000abe:	481b      	ldr	r0, [pc, #108]	@ (8000b2c <timeChoose+0xe8>)
 8000ac0:	f001 faa6 	bl	8002010 <HAL_GPIO_WritePin>
		break;
 8000ac4:	e02a      	b.n	8000b1c <timeChoose+0xd8>

	case 3:
		dataSend(oneMin);
 8000ac6:	481c      	ldr	r0, [pc, #112]	@ (8000b38 <timeChoose+0xf4>)
 8000ac8:	f000 f864 	bl	8000b94 <dataSend>
		HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin, RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2120      	movs	r1, #32
 8000ad0:	4816      	ldr	r0, [pc, #88]	@ (8000b2c <timeChoose+0xe8>)
 8000ad2:	f001 fa9d 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin, SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2110      	movs	r1, #16
 8000ada:	4814      	ldr	r0, [pc, #80]	@ (8000b2c <timeChoose+0xe8>)
 8000adc:	f001 fa98 	bl	8002010 <HAL_GPIO_WritePin>
		break;
 8000ae0:	e01c      	b.n	8000b1c <timeChoose+0xd8>

	case 4:
		dataSend(tenSec);
 8000ae2:	4816      	ldr	r0, [pc, #88]	@ (8000b3c <timeChoose+0xf8>)
 8000ae4:	f000 f856 	bl	8000b94 <dataSend>
		HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin, RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2110      	movs	r1, #16
 8000aec:	480f      	ldr	r0, [pc, #60]	@ (8000b2c <timeChoose+0xe8>)
 8000aee:	f001 fa8f 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L5_GPIO_Port, L5_Pin, SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2108      	movs	r1, #8
 8000af6:	480d      	ldr	r0, [pc, #52]	@ (8000b2c <timeChoose+0xe8>)
 8000af8:	f001 fa8a 	bl	8002010 <HAL_GPIO_WritePin>
		break;
 8000afc:	e00e      	b.n	8000b1c <timeChoose+0xd8>

	case 5:
		dataSend(oneSec);
 8000afe:	4810      	ldr	r0, [pc, #64]	@ (8000b40 <timeChoose+0xfc>)
 8000b00:	f000 f848 	bl	8000b94 <dataSend>
		HAL_GPIO_WritePin(L5_GPIO_Port, L5_Pin, RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2108      	movs	r1, #8
 8000b08:	4808      	ldr	r0, [pc, #32]	@ (8000b2c <timeChoose+0xe8>)
 8000b0a:	f001 fa81 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L6_GPIO_Port, L6_Pin, SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b14:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <timeChoose+0xe4>)
 8000b16:	f001 fa7b 	bl	8002010 <HAL_GPIO_WritePin>
		break;
 8000b1a:	bf00      	nop
	}
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000006c 	.word	0x2000006c
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	40010c00 	.word	0x40010c00
 8000b30:	2000009c 	.word	0x2000009c
 8000b34:	200000cc 	.word	0x200000cc
 8000b38:	200000fc 	.word	0x200000fc
 8000b3c:	2000012c 	.word	0x2000012c
 8000b40:	2000015c 	.word	0x2000015c

08000b44 <resetTube>:

void resetTube()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2180      	movs	r1, #128	@ 0x80
 8000b4c:	480f      	ldr	r0, [pc, #60]	@ (8000b8c <resetTube+0x48>)
 8000b4e:	f001 fa5f 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2140      	movs	r1, #64	@ 0x40
 8000b56:	480d      	ldr	r0, [pc, #52]	@ (8000b8c <resetTube+0x48>)
 8000b58:	f001 fa5a 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin, RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2120      	movs	r1, #32
 8000b60:	480a      	ldr	r0, [pc, #40]	@ (8000b8c <resetTube+0x48>)
 8000b62:	f001 fa55 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin, RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2110      	movs	r1, #16
 8000b6a:	4808      	ldr	r0, [pc, #32]	@ (8000b8c <resetTube+0x48>)
 8000b6c:	f001 fa50 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L5_GPIO_Port, L5_Pin, RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2108      	movs	r1, #8
 8000b74:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <resetTube+0x48>)
 8000b76:	f001 fa4b 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L6_GPIO_Port, L6_Pin, RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b80:	4803      	ldr	r0, [pc, #12]	@ (8000b90 <resetTube+0x4c>)
 8000b82:	f001 fa45 	bl	8002010 <HAL_GPIO_WritePin>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40010c00 	.word	0x40010c00
 8000b90:	40010800 	.word	0x40010800

08000b94 <dataSend>:


//set data
void dataSend(int arr[])
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	for (int n = 0; n < 11; n++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	e093      	b.n	8000cca <dataSend+0x136>
	{
		if (arr[n] == 1)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d13a      	bne.n	8000c26 <dataSend+0x92>
		{
			if (n == 0)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d11d      	bne.n	8000bf2 <dataSend+0x5e>
				{
					arr[10] = 1;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3328      	adds	r3, #40	@ 0x28
 8000bba:	2201      	movs	r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bc4:	4845      	ldr	r0, [pc, #276]	@ (8000cdc <dataSend+0x148>)
 8000bc6:	f001 fa23 	bl	8002010 <HAL_GPIO_WritePin>
					delayUS_ASM(delay);
 8000bca:	4b45      	ldr	r3, [pc, #276]	@ (8000ce0 <dataSend+0x14c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f1a0 0001 	sub.w	r0, r0, #1
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d1fb      	bne.n	8000bd0 <dataSend+0x3c>
					HAL_GPIO_TogglePin(CLOCK_PERIPH_GPIO_Port, CLOCK_PERIPH_Pin);
 8000bd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bdc:	483f      	ldr	r0, [pc, #252]	@ (8000cdc <dataSend+0x148>)
 8000bde:	f001 fa43 	bl	8002068 <HAL_GPIO_TogglePin>
					delayUS_ASM(delay);
 8000be2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce0 <dataSend+0x14c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f1a0 0001 	sub.w	r0, r0, #1
 8000bec:	2800      	cmp	r0, #0
 8000bee:	d1fb      	bne.n	8000be8 <dataSend+0x54>
 8000bf0:	e032      	b.n	8000c58 <dataSend+0xc4>
				}
			else
			{
				HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bf8:	4838      	ldr	r0, [pc, #224]	@ (8000cdc <dataSend+0x148>)
 8000bfa:	f001 fa09 	bl	8002010 <HAL_GPIO_WritePin>
				delayUS_ASM(delay);
 8000bfe:	4b38      	ldr	r3, [pc, #224]	@ (8000ce0 <dataSend+0x14c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f1a0 0001 	sub.w	r0, r0, #1
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	d1fb      	bne.n	8000c04 <dataSend+0x70>
				HAL_GPIO_TogglePin(CLOCK_PERIPH_GPIO_Port, CLOCK_PERIPH_Pin);
 8000c0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c10:	4832      	ldr	r0, [pc, #200]	@ (8000cdc <dataSend+0x148>)
 8000c12:	f001 fa29 	bl	8002068 <HAL_GPIO_TogglePin>
				delayUS_ASM(delay);
 8000c16:	4b32      	ldr	r3, [pc, #200]	@ (8000ce0 <dataSend+0x14c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f1a0 0001 	sub.w	r0, r0, #1
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d1fb      	bne.n	8000c1c <dataSend+0x88>
 8000c24:	e018      	b.n	8000c58 <dataSend+0xc4>
			}
		}
		else
		{
			HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c2c:	482b      	ldr	r0, [pc, #172]	@ (8000cdc <dataSend+0x148>)
 8000c2e:	f001 f9ef 	bl	8002010 <HAL_GPIO_WritePin>
			delayUS_ASM(delay);
 8000c32:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <dataSend+0x14c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f1a0 0001 	sub.w	r0, r0, #1
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	d1fb      	bne.n	8000c38 <dataSend+0xa4>
			HAL_GPIO_TogglePin(CLOCK_PERIPH_GPIO_Port, CLOCK_PERIPH_Pin);
 8000c40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c44:	4825      	ldr	r0, [pc, #148]	@ (8000cdc <dataSend+0x148>)
 8000c46:	f001 fa0f 	bl	8002068 <HAL_GPIO_TogglePin>
			delayUS_ASM(delay);
 8000c4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ce0 <dataSend+0x14c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f1a0 0001 	sub.w	r0, r0, #1
 8000c54:	2800      	cmp	r0, #0
 8000c56:	d1fb      	bne.n	8000c50 <dataSend+0xbc>
		}
		if (n < 10)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b09      	cmp	r3, #9
 8000c5c:	dc19      	bgt.n	8000c92 <dataSend+0xfe>
		{
			HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c64:	481d      	ldr	r0, [pc, #116]	@ (8000cdc <dataSend+0x148>)
 8000c66:	f001 f9d3 	bl	8002010 <HAL_GPIO_WritePin>
			delayUS_ASM(delay);
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce0 <dataSend+0x14c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f1a0 0001 	sub.w	r0, r0, #1
 8000c74:	2800      	cmp	r0, #0
 8000c76:	d1fb      	bne.n	8000c70 <dataSend+0xdc>
			HAL_GPIO_TogglePin(CLOCK_PERIPH_GPIO_Port, CLOCK_PERIPH_Pin);
 8000c78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c7c:	4817      	ldr	r0, [pc, #92]	@ (8000cdc <dataSend+0x148>)
 8000c7e:	f001 f9f3 	bl	8002068 <HAL_GPIO_TogglePin>
			delayUS_ASM(delay);
 8000c82:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <dataSend+0x14c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f1a0 0001 	sub.w	r0, r0, #1
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	d1fb      	bne.n	8000c88 <dataSend+0xf4>
 8000c90:	e018      	b.n	8000cc4 <dataSend+0x130>
		}
		else
		{
			HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c98:	4810      	ldr	r0, [pc, #64]	@ (8000cdc <dataSend+0x148>)
 8000c9a:	f001 f9b9 	bl	8002010 <HAL_GPIO_WritePin>
			delayUS_ASM(delay);
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <dataSend+0x14c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f1a0 0001 	sub.w	r0, r0, #1
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	d1fb      	bne.n	8000ca4 <dataSend+0x110>
			HAL_GPIO_TogglePin(CLOCK_PERIPH_GPIO_Port, CLOCK_PERIPH_Pin);
 8000cac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cb0:	480a      	ldr	r0, [pc, #40]	@ (8000cdc <dataSend+0x148>)
 8000cb2:	f001 f9d9 	bl	8002068 <HAL_GPIO_TogglePin>
			delayUS_ASM(delay);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <dataSend+0x14c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f1a0 0001 	sub.w	r0, r0, #1
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	d1fb      	bne.n	8000cbc <dataSend+0x128>
	for (int n = 0; n < 11; n++)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2b0a      	cmp	r3, #10
 8000cce:	f77f af68 	ble.w	8000ba2 <dataSend+0xe>
		}
	}
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40010800 	.word	0x40010800
 8000ce0:	20000018 	.word	0x20000018

08000ce4 <screenChange>:

#include "Menu.h"


void screenChange()
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
	if (interruptSource == BUTTON_RIGHT_Pin)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <screenChange+0x54>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000cf0:	d10e      	bne.n	8000d10 <screenChange+0x2c>
	{
		screenChoose++;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <screenChange+0x58>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4a10      	ldr	r2, [pc, #64]	@ (8000d3c <screenChange+0x58>)
 8000cfa:	6013      	str	r3, [r2, #0]
		screenChoose = screenChoose > 1 ? 0 : 1;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <screenChange+0x58>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	bfd4      	ite	le
 8000d04:	2301      	movle	r3, #1
 8000d06:	2300      	movgt	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <screenChange+0x58>)
 8000d0e:	601a      	str	r2, [r3, #0]
	}
	if (interruptSource == BUTTON_LEFT_Pin)
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <screenChange+0x54>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d18:	d10a      	bne.n	8000d30 <screenChange+0x4c>
	{
		screenChoose--;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <screenChange+0x58>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	4a06      	ldr	r2, [pc, #24]	@ (8000d3c <screenChange+0x58>)
 8000d22:	6013      	str	r3, [r2, #0]
		screenChoose = screenChoose < 0 ? 1 : 0;
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <screenChange+0x58>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	0fdb      	lsrs	r3, r3, #31
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <screenChange+0x58>)
 8000d2e:	601a      	str	r2, [r3, #0]
	}
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	200002bc 	.word	0x200002bc
 8000d3c:	200002ac 	.word	0x200002ac

08000d40 <settings>:

void settings()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	@ 0x28
 8000d44:	af00      	add	r7, sp, #0
	settingsFlag = 5;
 8000d46:	4b94      	ldr	r3, [pc, #592]	@ (8000f98 <settings+0x258>)
 8000d48:	2205      	movs	r2, #5
 8000d4a:	601a      	str	r2, [r3, #0]

	RTC_TimeTypeDef sTime = {0};
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2100      	movs	r1, #0
 8000d52:	460a      	mov	r2, r1
 8000d54:	801a      	strh	r2, [r3, #0]
 8000d56:	460a      	mov	r2, r1
 8000d58:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef sDate = {0};
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
	RTC_DateTypeDef getDate = {0};
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
	RTC_TimeTypeDef getTime = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2100      	movs	r1, #0
 8000d66:	460a      	mov	r2, r1
 8000d68:	801a      	strh	r2, [r3, #0]
 8000d6a:	460a      	mov	r2, r1
 8000d6c:	709a      	strb	r2, [r3, #2]

	if (HAL_RTC_GetTime(&hrtc, &getTime, RTC_FORMAT_BIN) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	4619      	mov	r1, r3
 8000d74:	4889      	ldr	r0, [pc, #548]	@ (8000f9c <settings+0x25c>)
 8000d76:	f002 faaf 	bl	80032d8 <HAL_RTC_GetTime>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <settings+0x44>
	{
		Error_Handler();
 8000d80:	f000 fb16 	bl	80013b0 <Error_Handler>
	}

	if (HAL_RTC_GetDate(&hrtc, &getDate, RTC_FORMAT_BIN) != HAL_OK)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4884      	ldr	r0, [pc, #528]	@ (8000f9c <settings+0x25c>)
 8000d8c:	f002 fca8 	bl	80036e0 <HAL_RTC_GetDate>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <settings+0x5a>
	{
		Error_Handler();
 8000d96:	f000 fb0b 	bl	80013b0 <Error_Handler>
	}

	if(screenChoose == 0)
 8000d9a:	4b81      	ldr	r3, [pc, #516]	@ (8000fa0 <settings+0x260>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d175      	bne.n	8000e8e <settings+0x14e>
	{
		int seconds, minutes, hours;
		seconds = getTime.Seconds;
 8000da2:	78bb      	ldrb	r3, [r7, #2]
 8000da4:	61bb      	str	r3, [r7, #24]
		minutes = getTime.Minutes;
 8000da6:	787b      	ldrb	r3, [r7, #1]
 8000da8:	617b      	str	r3, [r7, #20]
		hours = getTime.Hours;
 8000daa:	783b      	ldrb	r3, [r7, #0]
 8000dac:	613b      	str	r3, [r7, #16]

		switch (unitChoose)
 8000dae:	4b7d      	ldr	r3, [pc, #500]	@ (8000fa4 <settings+0x264>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d040      	beq.n	8000e38 <settings+0xf8>
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	dc5b      	bgt.n	8000e72 <settings+0x132>
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <settings+0x84>
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d01d      	beq.n	8000dfe <settings+0xbe>
 8000dc2:	e056      	b.n	8000e72 <settings+0x132>
		{
		case 0:

			if (interruptSource == BUTTON_RIGHT_Pin) sTime.Hours = hours + 1;
 8000dc4:	4b78      	ldr	r3, [pc, #480]	@ (8000fa8 <settings+0x268>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000dcc:	d105      	bne.n	8000dda <settings+0x9a>
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	733b      	strb	r3, [r7, #12]
 8000dd8:	e00a      	b.n	8000df0 <settings+0xb0>
			else if (hours > 0) sTime.Hours = hours - 1;
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	dd05      	ble.n	8000dec <settings+0xac>
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	3b01      	subs	r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	733b      	strb	r3, [r7, #12]
 8000dea:	e001      	b.n	8000df0 <settings+0xb0>
			else sTime.Hours = 23;
 8000dec:	2317      	movs	r3, #23
 8000dee:	733b      	strb	r3, [r7, #12]
			sTime.Minutes = minutes;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	737b      	strb	r3, [r7, #13]
			sTime.Seconds = seconds;
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	73bb      	strb	r3, [r7, #14]
			break;
 8000dfc:	e039      	b.n	8000e72 <settings+0x132>

		case 1:

			sTime.Hours = hours;
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	733b      	strb	r3, [r7, #12]
			if (interruptSource == BUTTON_RIGHT_Pin) sTime.Minutes = minutes + 1;
 8000e04:	4b68      	ldr	r3, [pc, #416]	@ (8000fa8 <settings+0x268>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e0c:	d105      	bne.n	8000e1a <settings+0xda>
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	3301      	adds	r3, #1
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	737b      	strb	r3, [r7, #13]
 8000e18:	e00a      	b.n	8000e30 <settings+0xf0>
			else if (minutes > 0) sTime.Minutes = minutes - 1;
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	dd05      	ble.n	8000e2c <settings+0xec>
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	3b01      	subs	r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	737b      	strb	r3, [r7, #13]
 8000e2a:	e001      	b.n	8000e30 <settings+0xf0>
			else sTime.Minutes = 59;
 8000e2c:	233b      	movs	r3, #59	@ 0x3b
 8000e2e:	737b      	strb	r3, [r7, #13]
			sTime.Seconds = seconds;
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	73bb      	strb	r3, [r7, #14]
			break;
 8000e36:	e01c      	b.n	8000e72 <settings+0x132>

		case 2:

			sTime.Hours = hours;
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	733b      	strb	r3, [r7, #12]
			sTime.Minutes = minutes;
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	737b      	strb	r3, [r7, #13]
			if (interruptSource == BUTTON_RIGHT_Pin) sTime.Seconds = seconds + 1;
 8000e44:	4b58      	ldr	r3, [pc, #352]	@ (8000fa8 <settings+0x268>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e4c:	d105      	bne.n	8000e5a <settings+0x11a>
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	3301      	adds	r3, #1
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	73bb      	strb	r3, [r7, #14]
			else if (seconds > 0) sTime.Seconds = seconds - 1;
			else sTime.Seconds = 59;
			break;
 8000e58:	e00a      	b.n	8000e70 <settings+0x130>
			else if (seconds > 0) sTime.Seconds = seconds - 1;
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	dd05      	ble.n	8000e6c <settings+0x12c>
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	3b01      	subs	r3, #1
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	73bb      	strb	r3, [r7, #14]
			break;
 8000e6a:	e001      	b.n	8000e70 <settings+0x130>
			else sTime.Seconds = 59;
 8000e6c:	233b      	movs	r3, #59	@ 0x3b
 8000e6e:	73bb      	strb	r3, [r7, #14]
			break;
 8000e70:	bf00      	nop
		}

		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	2200      	movs	r2, #0
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4848      	ldr	r0, [pc, #288]	@ (8000f9c <settings+0x25c>)
 8000e7c:	f002 f946 	bl	800310c <HAL_RTC_SetTime>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 80ff 	beq.w	8001086 <settings+0x346>
		{
			Error_Handler();
 8000e88:	f000 fa92 	bl	80013b0 <Error_Handler>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
		{
			Error_Handler();
		}
	}
}
 8000e8c:	e0fb      	b.n	8001086 <settings+0x346>
		date = getDate.Date;
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
		month = getDate.Month;
 8000e92:	797b      	ldrb	r3, [r7, #5]
 8000e94:	623b      	str	r3, [r7, #32]
		year = getDate.Year;
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	61fb      	str	r3, [r7, #28]
		switch (unitChoose)
 8000e9a:	4b42      	ldr	r3, [pc, #264]	@ (8000fa4 <settings+0x264>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	f000 80c2 	beq.w	8001028 <settings+0x2e8>
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	f300 80e2 	bgt.w	800106e <settings+0x32e>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <settings+0x176>
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	f000 8098 	beq.w	8000fe4 <settings+0x2a4>
 8000eb4:	e0db      	b.n	800106e <settings+0x32e>
			sDate.Year = year;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	72fb      	strb	r3, [r7, #11]
			sDate.Month = month;
 8000ebc:	6a3b      	ldr	r3, [r7, #32]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	727b      	strb	r3, [r7, #9]
			if (interruptSource == BUTTON_RIGHT_Pin)
 8000ec2:	4b39      	ldr	r3, [pc, #228]	@ (8000fa8 <settings+0x268>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000eca:	d146      	bne.n	8000f5a <settings+0x21a>
				if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 \
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d011      	beq.n	8000ef6 <settings+0x1b6>
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d00e      	beq.n	8000ef6 <settings+0x1b6>
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	2b05      	cmp	r3, #5
 8000edc:	d00b      	beq.n	8000ef6 <settings+0x1b6>
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	d008      	beq.n	8000ef6 <settings+0x1b6>
 8000ee4:	6a3b      	ldr	r3, [r7, #32]
 8000ee6:	2b08      	cmp	r3, #8
 8000ee8:	d005      	beq.n	8000ef6 <settings+0x1b6>
								|| month == 10 || month == 12) && date < 31) sDate.Date = date + 1;
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	2b0a      	cmp	r3, #10
 8000eee:	d002      	beq.n	8000ef6 <settings+0x1b6>
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
 8000ef2:	2b0c      	cmp	r3, #12
 8000ef4:	d108      	bne.n	8000f08 <settings+0x1c8>
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef8:	2b1e      	cmp	r3, #30
 8000efa:	dc05      	bgt.n	8000f08 <settings+0x1c8>
 8000efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	3301      	adds	r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	72bb      	strb	r3, [r7, #10]
 8000f06:	e06c      	b.n	8000fe2 <settings+0x2a2>
				else if ((month == 4 || month == 6 || month == 9 || month == 11) && date < 30)
 8000f08:	6a3b      	ldr	r3, [r7, #32]
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d008      	beq.n	8000f20 <settings+0x1e0>
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
 8000f10:	2b06      	cmp	r3, #6
 8000f12:	d005      	beq.n	8000f20 <settings+0x1e0>
 8000f14:	6a3b      	ldr	r3, [r7, #32]
 8000f16:	2b09      	cmp	r3, #9
 8000f18:	d002      	beq.n	8000f20 <settings+0x1e0>
 8000f1a:	6a3b      	ldr	r3, [r7, #32]
 8000f1c:	2b0b      	cmp	r3, #11
 8000f1e:	d108      	bne.n	8000f32 <settings+0x1f2>
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	2b1d      	cmp	r3, #29
 8000f24:	dc05      	bgt.n	8000f32 <settings+0x1f2>
							sDate.Date = date + 1;
 8000f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	72bb      	strb	r3, [r7, #10]
 8000f30:	e057      	b.n	8000fe2 <settings+0x2a2>
				else if ((month == 2) && (year % 4 == 0) && date < 29) sDate.Date = date + 1;
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d10d      	bne.n	8000f54 <settings+0x214>
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d108      	bne.n	8000f54 <settings+0x214>
 8000f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f44:	2b1c      	cmp	r3, #28
 8000f46:	dc05      	bgt.n	8000f54 <settings+0x214>
 8000f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	72bb      	strb	r3, [r7, #10]
 8000f52:	e046      	b.n	8000fe2 <settings+0x2a2>
				else sDate.Date = 1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	72bb      	strb	r3, [r7, #10]
			break;
 8000f58:	e089      	b.n	800106e <settings+0x32e>
			else if (date > 1) sDate.Date = date - 1;
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	dd05      	ble.n	8000f6c <settings+0x22c>
 8000f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	3b01      	subs	r3, #1
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	72bb      	strb	r3, [r7, #10]
			break;
 8000f6a:	e080      	b.n	800106e <settings+0x32e>
			else if ((month == 2) && (year % 4 != 0)) sDate.Date = 28;
 8000f6c:	6a3b      	ldr	r3, [r7, #32]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d107      	bne.n	8000f82 <settings+0x242>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <settings+0x242>
 8000f7c:	231c      	movs	r3, #28
 8000f7e:	72bb      	strb	r3, [r7, #10]
 8000f80:	e02f      	b.n	8000fe2 <settings+0x2a2>
			else if ((month == 2) && (year % 4 == 0)) sDate.Date = 29;
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d111      	bne.n	8000fac <settings+0x26c>
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <settings+0x26c>
 8000f92:	231d      	movs	r3, #29
 8000f94:	72bb      	strb	r3, [r7, #10]
 8000f96:	e024      	b.n	8000fe2 <settings+0x2a2>
 8000f98:	200002b8 	.word	0x200002b8
 8000f9c:	200002c0 	.word	0x200002c0
 8000fa0:	200002ac 	.word	0x200002ac
 8000fa4:	200002b0 	.word	0x200002b0
 8000fa8:	200002bc 	.word	0x200002bc
			else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 \
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d011      	beq.n	8000fd6 <settings+0x296>
 8000fb2:	6a3b      	ldr	r3, [r7, #32]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d00e      	beq.n	8000fd6 <settings+0x296>
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	2b05      	cmp	r3, #5
 8000fbc:	d00b      	beq.n	8000fd6 <settings+0x296>
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	2b07      	cmp	r3, #7
 8000fc2:	d008      	beq.n	8000fd6 <settings+0x296>
 8000fc4:	6a3b      	ldr	r3, [r7, #32]
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d005      	beq.n	8000fd6 <settings+0x296>
							|| month == 10 || month == 12) sDate.Date = 31;
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	2b0a      	cmp	r3, #10
 8000fce:	d002      	beq.n	8000fd6 <settings+0x296>
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	2b0c      	cmp	r3, #12
 8000fd4:	d102      	bne.n	8000fdc <settings+0x29c>
 8000fd6:	231f      	movs	r3, #31
 8000fd8:	72bb      	strb	r3, [r7, #10]
 8000fda:	e002      	b.n	8000fe2 <settings+0x2a2>
			else sDate.Date = 30;
 8000fdc:	231e      	movs	r3, #30
 8000fde:	72bb      	strb	r3, [r7, #10]
			break;
 8000fe0:	e045      	b.n	800106e <settings+0x32e>
 8000fe2:	e044      	b.n	800106e <settings+0x32e>
			sDate.Year = year;
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	72fb      	strb	r3, [r7, #11]
			if (interruptSource == BUTTON_RIGHT_Pin)
 8000fea:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <settings+0x350>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ff2:	d10b      	bne.n	800100c <settings+0x2cc>
				if (month < 12) sDate.Month = month + 1;
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
 8000ff6:	2b0b      	cmp	r3, #11
 8000ff8:	dc05      	bgt.n	8001006 <settings+0x2c6>
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	3301      	adds	r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	727b      	strb	r3, [r7, #9]
 8001004:	e00d      	b.n	8001022 <settings+0x2e2>
				else sDate.Month = 1;
 8001006:	2301      	movs	r3, #1
 8001008:	727b      	strb	r3, [r7, #9]
 800100a:	e00a      	b.n	8001022 <settings+0x2e2>
			else if (month > 1) sDate.Month = month - 1;
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	2b01      	cmp	r3, #1
 8001010:	dd05      	ble.n	800101e <settings+0x2de>
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	3b01      	subs	r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	727b      	strb	r3, [r7, #9]
 800101c:	e001      	b.n	8001022 <settings+0x2e2>
			else sDate.Month = 12;
 800101e:	230c      	movs	r3, #12
 8001020:	727b      	strb	r3, [r7, #9]
			sDate.Date = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	72bb      	strb	r3, [r7, #10]
			break;
 8001026:	e022      	b.n	800106e <settings+0x32e>
			if (interruptSource == BUTTON_RIGHT_Pin)
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <settings+0x350>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001030:	d10b      	bne.n	800104a <settings+0x30a>
				if (year < 99) sDate.Year = year + 1;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	2b62      	cmp	r3, #98	@ 0x62
 8001036:	dc05      	bgt.n	8001044 <settings+0x304>
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	3301      	adds	r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	72fb      	strb	r3, [r7, #11]
 8001042:	e00d      	b.n	8001060 <settings+0x320>
				else sDate.Year = 1;
 8001044:	2301      	movs	r3, #1
 8001046:	72fb      	strb	r3, [r7, #11]
 8001048:	e00a      	b.n	8001060 <settings+0x320>
			else if (year > 0) sDate.Year = year - 1;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd05      	ble.n	800105c <settings+0x31c>
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	3b01      	subs	r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	72fb      	strb	r3, [r7, #11]
 800105a:	e001      	b.n	8001060 <settings+0x320>
			else sDate.Year = 99;
 800105c:	2363      	movs	r3, #99	@ 0x63
 800105e:	72fb      	strb	r3, [r7, #11]
			sDate.Month = month;
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	727b      	strb	r3, [r7, #9]
			sDate.Date = date;
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001068:	b2db      	uxtb	r3, r3
 800106a:	72bb      	strb	r3, [r7, #10]
			break;
 800106c:	bf00      	nop
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	4807      	ldr	r0, [pc, #28]	@ (8001094 <settings+0x354>)
 8001078:	f002 fa14 	bl	80034a4 <HAL_RTC_SetDate>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <settings+0x346>
			Error_Handler();
 8001082:	f000 f995 	bl	80013b0 <Error_Handler>
}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	@ 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200002bc 	.word	0x200002bc
 8001094:	200002c0 	.word	0x200002c0

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109c:	f000 fb68 	bl	8001770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a0:	f000 f910 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a4:	f7ff f9a4 	bl	80003f0 <MX_GPIO_Init>
  MX_RTC_Init();
 80010a8:	f000 f992 	bl	80013d0 <MX_RTC_Init>
  MX_TIM2_Init();
 80010ac:	f000 fa60 	bl	8001570 <MX_TIM2_Init>
  MX_TIM4_Init();
 80010b0:	f000 faaa 	bl	8001608 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010b4:	4879      	ldr	r0, [pc, #484]	@ (800129c <main+0x204>)
 80010b6:	f002 fedb 	bl	8003e70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80010ba:	4879      	ldr	r0, [pc, #484]	@ (80012a0 <main+0x208>)
 80010bc:	f002 fed8 	bl	8003e70 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2180      	movs	r1, #128	@ 0x80
 80010c4:	4877      	ldr	r0, [pc, #476]	@ (80012a4 <main+0x20c>)
 80010c6:	f000 ffa3 	bl	8002010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2140      	movs	r1, #64	@ 0x40
 80010ce:	4875      	ldr	r0, [pc, #468]	@ (80012a4 <main+0x20c>)
 80010d0:	f000 ff9e 	bl	8002010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin, RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2120      	movs	r1, #32
 80010d8:	4872      	ldr	r0, [pc, #456]	@ (80012a4 <main+0x20c>)
 80010da:	f000 ff99 	bl	8002010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin, RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2110      	movs	r1, #16
 80010e2:	4870      	ldr	r0, [pc, #448]	@ (80012a4 <main+0x20c>)
 80010e4:	f000 ff94 	bl	8002010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L5_GPIO_Port, L5_Pin, RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2108      	movs	r1, #8
 80010ec:	486d      	ldr	r0, [pc, #436]	@ (80012a4 <main+0x20c>)
 80010ee:	f000 ff8f 	bl	8002010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L6_GPIO_Port, L6_Pin, RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f8:	486b      	ldr	r0, [pc, #428]	@ (80012a8 <main+0x210>)
 80010fa:	f000 ff89 	bl	8002010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CLOCK_PERIPH_GPIO_Port, CLOCK_PERIPH_Pin, RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001104:	4868      	ldr	r0, [pc, #416]	@ (80012a8 <main+0x210>)
 8001106:	f000 ff83 	bl	8002010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001110:	4865      	ldr	r0, [pc, #404]	@ (80012a8 <main+0x210>)
 8001112:	f000 ff7d 	bl	8002010 <HAL_GPIO_WritePin>

  clockStart();
 8001116:	f7ff fa17 	bl	8000548 <clockStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (settingsFlag == 0)
 800111a:	4b64      	ldr	r3, [pc, #400]	@ (80012ac <main+0x214>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d105      	bne.n	800112e <main+0x96>
	  {
		  isSettingsOn = 0;
 8001122:	4b63      	ldr	r3, [pc, #396]	@ (80012b0 <main+0x218>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
		  unitChoose = 0;
 8001128:	4b62      	ldr	r3, [pc, #392]	@ (80012b4 <main+0x21c>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
	  }
	  BUTTON_Process();
 800112e:	f7ff f8f3 	bl	8000318 <BUTTON_Process>

	  if (BUTTON_GetAction(BUTTON_MIDDLE) == BUTTON_VERY_LONG_PRESS && !veryLongPressFlag)
 8001132:	2001      	movs	r0, #1
 8001134:	f7ff f934 	bl	80003a0 <BUTTON_GetAction>
 8001138:	4603      	mov	r3, r0
 800113a:	2b03      	cmp	r3, #3
 800113c:	d11f      	bne.n	800117e <main+0xe6>
 800113e:	4b5e      	ldr	r3, [pc, #376]	@ (80012b8 <main+0x220>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	f083 0301 	eor.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d018      	beq.n	800117e <main+0xe6>
	  {
		  isPowerOn = !isPowerOn;
 800114c:	4b5b      	ldr	r3, [pc, #364]	@ (80012bc <main+0x224>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	bf14      	ite	ne
 8001154:	2301      	movne	r3, #1
 8001156:	2300      	moveq	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f083 0301 	eor.w	r3, r3, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b55      	ldr	r3, [pc, #340]	@ (80012bc <main+0x224>)
 8001168:	701a      	strb	r2, [r3, #0]
		  isSettingsOn = 0;
 800116a:	4b51      	ldr	r3, [pc, #324]	@ (80012b0 <main+0x218>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
		  unitChoose = 0;
 8001170:	4b50      	ldr	r3, [pc, #320]	@ (80012b4 <main+0x21c>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
		  veryLongPressFlag = 1;
 8001176:	4b50      	ldr	r3, [pc, #320]	@ (80012b8 <main+0x220>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e008      	b.n	8001190 <main+0xf8>
	  }
	  else if (BUTTON_GetAction(BUTTON_MIDDLE) != BUTTON_VERY_LONG_PRESS)
 800117e:	2001      	movs	r0, #1
 8001180:	f7ff f90e 	bl	80003a0 <BUTTON_GetAction>
 8001184:	4603      	mov	r3, r0
 8001186:	2b03      	cmp	r3, #3
 8001188:	d002      	beq.n	8001190 <main+0xf8>
	  {
		  veryLongPressFlag = 0;
 800118a:	4b4b      	ldr	r3, [pc, #300]	@ (80012b8 <main+0x220>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
	  }

	  if (isPowerOn)
 8001190:	4b4a      	ldr	r3, [pc, #296]	@ (80012bc <main+0x224>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d07d      	beq.n	8001294 <main+0x1fc>
	  {
		  if(BUTTON_GetAction(BUTTON_LEFT) == BUTTON_SHORT_PRESS)
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff f901 	bl	80003a0 <BUTTON_GetAction>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d10c      	bne.n	80011be <main+0x126>
		  {
			  interruptSource = BUTTON_LEFT_Pin;
 80011a4:	4b46      	ldr	r3, [pc, #280]	@ (80012c0 <main+0x228>)
 80011a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011aa:	601a      	str	r2, [r3, #0]
			  if (isSettingsOn) settings();
 80011ac:	4b40      	ldr	r3, [pc, #256]	@ (80012b0 <main+0x218>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <main+0x122>
 80011b4:	f7ff fdc4 	bl	8000d40 <settings>
 80011b8:	e001      	b.n	80011be <main+0x126>
			  else screenChange();
 80011ba:	f7ff fd93 	bl	8000ce4 <screenChange>
		  }

		  if(BUTTON_GetAction(BUTTON_LEFT) == BUTTON_LONG_PRESS)
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff f8ee 	bl	80003a0 <BUTTON_GetAction>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d109      	bne.n	80011de <main+0x146>
		  {
			  interruptSource = BUTTON_LEFT_Pin;
 80011ca:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <main+0x228>)
 80011cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011d0:	601a      	str	r2, [r3, #0]
			  settings();
 80011d2:	f7ff fdb5 	bl	8000d40 <settings>
			  HAL_Delay(300);
 80011d6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011da:	f000 fb2b 	bl	8001834 <HAL_Delay>
		  }

		  if(BUTTON_GetAction(BUTTON_LEFT) == BUTTON_VERY_LONG_PRESS)
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff f8de 	bl	80003a0 <BUTTON_GetAction>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d108      	bne.n	80011fc <main+0x164>
		  {
			  interruptSource = BUTTON_LEFT_Pin;
 80011ea:	4b35      	ldr	r3, [pc, #212]	@ (80012c0 <main+0x228>)
 80011ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011f0:	601a      	str	r2, [r3, #0]
			  settings();
 80011f2:	f7ff fda5 	bl	8000d40 <settings>
			  HAL_Delay(100);
 80011f6:	2064      	movs	r0, #100	@ 0x64
 80011f8:	f000 fb1c 	bl	8001834 <HAL_Delay>
		  }

		  if (BUTTON_GetAction(BUTTON_MIDDLE) == BUTTON_SHORT_PRESS)
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff f8cf 	bl	80003a0 <BUTTON_GetAction>
 8001202:	4603      	mov	r3, r0
 8001204:	2b01      	cmp	r3, #1
 8001206:	d114      	bne.n	8001232 <main+0x19a>
		  {
				  isSettingsOn = 1;
 8001208:	4b29      	ldr	r3, [pc, #164]	@ (80012b0 <main+0x218>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
				  settingsFlag = 5;
 800120e:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <main+0x214>)
 8001210:	2205      	movs	r2, #5
 8001212:	601a      	str	r2, [r3, #0]
				  unitChoose--;
 8001214:	4b27      	ldr	r3, [pc, #156]	@ (80012b4 <main+0x21c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3b01      	subs	r3, #1
 800121a:	4a26      	ldr	r2, [pc, #152]	@ (80012b4 <main+0x21c>)
 800121c:	6013      	str	r3, [r2, #0]
				  unitChoose = unitChoose <= -1 ? 2 : unitChoose;
 800121e:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <main+0x21c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db02      	blt.n	800122c <main+0x194>
 8001226:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <main+0x21c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	e000      	b.n	800122e <main+0x196>
 800122c:	2302      	movs	r3, #2
 800122e:	4a21      	ldr	r2, [pc, #132]	@ (80012b4 <main+0x21c>)
 8001230:	6013      	str	r3, [r2, #0]
		  }



		  if(BUTTON_GetAction(BUTTON_RIGHT) == BUTTON_SHORT_PRESS)
 8001232:	2002      	movs	r0, #2
 8001234:	f7ff f8b4 	bl	80003a0 <BUTTON_GetAction>
 8001238:	4603      	mov	r3, r0
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10c      	bne.n	8001258 <main+0x1c0>
		  {
			  interruptSource = BUTTON_RIGHT_Pin;
 800123e:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <main+0x228>)
 8001240:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001244:	601a      	str	r2, [r3, #0]
			  if (isSettingsOn) settings();
 8001246:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <main+0x218>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <main+0x1bc>
 800124e:	f7ff fd77 	bl	8000d40 <settings>
 8001252:	e001      	b.n	8001258 <main+0x1c0>
			  else screenChange();
 8001254:	f7ff fd46 	bl	8000ce4 <screenChange>
		  }

		  if(BUTTON_GetAction(BUTTON_RIGHT) == BUTTON_LONG_PRESS)
 8001258:	2002      	movs	r0, #2
 800125a:	f7ff f8a1 	bl	80003a0 <BUTTON_GetAction>
 800125e:	4603      	mov	r3, r0
 8001260:	2b02      	cmp	r3, #2
 8001262:	d108      	bne.n	8001276 <main+0x1de>
		  {
			  interruptSource = BUTTON_RIGHT_Pin;
 8001264:	4b16      	ldr	r3, [pc, #88]	@ (80012c0 <main+0x228>)
 8001266:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800126a:	601a      	str	r2, [r3, #0]
			  settings();
 800126c:	f7ff fd68 	bl	8000d40 <settings>
			  HAL_Delay(80);
 8001270:	2050      	movs	r0, #80	@ 0x50
 8001272:	f000 fadf 	bl	8001834 <HAL_Delay>
		  }

		  if(BUTTON_GetAction(BUTTON_RIGHT) == BUTTON_VERY_LONG_PRESS)
 8001276:	2002      	movs	r0, #2
 8001278:	f7ff f892 	bl	80003a0 <BUTTON_GetAction>
 800127c:	4603      	mov	r3, r0
 800127e:	2b03      	cmp	r3, #3
 8001280:	d108      	bne.n	8001294 <main+0x1fc>
		  {
			  interruptSource = BUTTON_RIGHT_Pin;
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <main+0x228>)
 8001284:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001288:	601a      	str	r2, [r3, #0]
			  settings();
 800128a:	f7ff fd59 	bl	8000d40 <settings>
			  HAL_Delay(40);
 800128e:	2028      	movs	r0, #40	@ 0x28
 8001290:	f000 fad0 	bl	8001834 <HAL_Delay>
		  }
	  }
	  BUTTON_ResetActions();
 8001294:	f7ff f894 	bl	80003c0 <BUTTON_ResetActions>
	  if (settingsFlag == 0)
 8001298:	e73f      	b.n	800111a <main+0x82>
 800129a:	bf00      	nop
 800129c:	200002d4 	.word	0x200002d4
 80012a0:	20000388 	.word	0x20000388
 80012a4:	40010c00 	.word	0x40010c00
 80012a8:	40010800 	.word	0x40010800
 80012ac:	200002b8 	.word	0x200002b8
 80012b0:	200002b4 	.word	0x200002b4
 80012b4:	200002b0 	.word	0x200002b0
 80012b8:	200002b5 	.word	0x200002b5
 80012bc:	2000001c 	.word	0x2000001c
 80012c0:	200002bc 	.word	0x200002bc

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b094      	sub	sp, #80	@ 0x50
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ce:	2228      	movs	r2, #40	@ 0x28
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 fc79 	bl	8004bca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80012f4:	2309      	movs	r3, #9
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001302:	2301      	movs	r3, #1
 8001304:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001306:	2301      	movs	r3, #1
 8001308:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130a:	2302      	movs	r3, #2
 800130c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001312:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001314:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001318:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fed0 	bl	80020c4 <HAL_RCC_OscConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800132a:	f000 f841 	bl	80013b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132e:	230f      	movs	r3, #15
 8001330:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001332:	2302      	movs	r3, #2
 8001334:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800133a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800133e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2102      	movs	r1, #2
 800134a:	4618      	mov	r0, r3
 800134c:	f001 fa28 	bl	80027a0 <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001356:	f000 f82b 	bl	80013b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800135a:	2301      	movs	r3, #1
 800135c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800135e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001362:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	4618      	mov	r0, r3
 8001368:	f001 fc3a 	bl	8002be0 <HAL_RCCEx_PeriphCLKConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001372:	f000 f81d 	bl	80013b0 <Error_Handler>
  }
}
 8001376:	bf00      	nop
 8001378:	3750      	adds	r7, #80	@ 0x50
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a07      	ldr	r2, [pc, #28]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d101      	bne.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    clockControl();
 8001390:	f7ff f910 	bl	80005b4 <clockControl>
  }
  if (htim == &htim4)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d101      	bne.n	80013a0 <HAL_TIM_PeriodElapsedCallback+0x20>
  {
	BUTTON_TimerProcess();
 800139c:	f7fe ffc4 	bl	8000328 <BUTTON_TimerProcess>
  }
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200002d4 	.word	0x200002d4
 80013ac:	20000388 	.word	0x20000388

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <Error_Handler+0x8>

080013bc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2100      	movs	r1, #0
 80013da:	460a      	mov	r2, r1
 80013dc:	801a      	strh	r2, [r3, #0]
 80013de:	460a      	mov	r2, r1
 80013e0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80013e2:	2300      	movs	r3, #0
 80013e4:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_RTC_Init+0x60>)
 80013e8:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <MX_RTC_Init+0x64>)
 80013ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80013ec:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <MX_RTC_Init+0x60>)
 80013ee:	f04f 32ff 	mov.w	r2, #4294967295
 80013f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80013f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_RTC_Init+0x60>)
 80013f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013fa:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013fc:	480c      	ldr	r0, [pc, #48]	@ (8001430 <MX_RTC_Init+0x60>)
 80013fe:	f001 fdc5 	bl	8002f8c <HAL_RTC_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001408:	f7ff ffd2 	bl	80013b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800140c:	2300      	movs	r3, #0
 800140e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001410:	2300      	movs	r3, #0
 8001412:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001414:	2300      	movs	r3, #0
 8001416:	71bb      	strb	r3, [r7, #6]

//  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
//  {
//    Error_Handler();
//  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001418:	2301      	movs	r3, #1
 800141a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800141c:	2301      	movs	r3, #1
 800141e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8001420:	2301      	movs	r3, #1
 8001422:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8001424:	2300      	movs	r3, #0
 8001426:	70fb      	strb	r3, [r7, #3]
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200002c0 	.word	0x200002c0
 8001434:	40002800 	.word	0x40002800

08001438 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0b      	ldr	r2, [pc, #44]	@ (8001474 <HAL_RTC_MspInit+0x3c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d110      	bne.n	800146c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800144a:	f000 fe2f 	bl	80020ac <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_RTC_MspInit+0x40>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a09      	ldr	r2, [pc, #36]	@ (8001478 <HAL_RTC_MspInit+0x40>)
 8001454:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <HAL_RTC_MspInit+0x40>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001466:	4b05      	ldr	r3, [pc, #20]	@ (800147c <HAL_RTC_MspInit+0x44>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40002800 	.word	0x40002800
 8001478:	40021000 	.word	0x40021000
 800147c:	4242043c 	.word	0x4242043c

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <HAL_MspInit+0x5c>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	4a14      	ldr	r2, [pc, #80]	@ (80014dc <HAL_MspInit+0x5c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6193      	str	r3, [r2, #24]
 8001492:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_MspInit+0x5c>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <HAL_MspInit+0x5c>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a0e      	ldr	r2, [pc, #56]	@ (80014dc <HAL_MspInit+0x5c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <HAL_MspInit+0x5c>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <HAL_MspInit+0x60>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <HAL_MspInit+0x60>)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010000 	.word	0x40010000

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <NMI_Handler+0x4>

080014ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <MemManage_Handler+0x4>

080014fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <UsageFault_Handler+0x4>

0800150c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001534:	f000 f962 	bl	80017fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}

0800153c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <TIM2_IRQHandler+0x10>)
 8001542:	f002 fd01 	bl	8003f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200002d4 	.word	0x200002d4

08001550 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <TIM4_IRQHandler+0x10>)
 8001556:	f002 fcf7 	bl	8003f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000388 	.word	0x20000388

08001564 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800158c:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <MX_TIM2_Init+0x94>)
 800158e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25-1;
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <MX_TIM2_Init+0x94>)
 8001596:	2218      	movs	r2, #24
 8001598:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <MX_TIM2_Init+0x94>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000-1;
 80015a0:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <MX_TIM2_Init+0x94>)
 80015a2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80015a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <MX_TIM2_Init+0x94>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <MX_TIM2_Init+0x94>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b4:	4813      	ldr	r0, [pc, #76]	@ (8001604 <MX_TIM2_Init+0x94>)
 80015b6:	f002 fb97 	bl	8003ce8 <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015c0:	f7ff fef6 	bl	80013b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	4619      	mov	r1, r3
 80015d0:	480c      	ldr	r0, [pc, #48]	@ (8001604 <MX_TIM2_Init+0x94>)
 80015d2:	f002 fde1 	bl	8004198 <HAL_TIM_ConfigClockSource>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015dc:	f7ff fee8 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e8:	463b      	mov	r3, r7
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	@ (8001604 <MX_TIM2_Init+0x94>)
 80015ee:	f003 fa27 	bl	8004a40 <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015f8:	f7ff feda 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200002d4 	.word	0x200002d4

08001608 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	463b      	mov	r3, r7
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001624:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <MX_TIM4_Init+0x94>)
 8001626:	4a1e      	ldr	r2, [pc, #120]	@ (80016a0 <MX_TIM4_Init+0x98>)
 8001628:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800162a:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <MX_TIM4_Init+0x94>)
 800162c:	2247      	movs	r2, #71	@ 0x47
 800162e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001630:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <MX_TIM4_Init+0x94>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001636:	4b19      	ldr	r3, [pc, #100]	@ (800169c <MX_TIM4_Init+0x94>)
 8001638:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800163c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163e:	4b17      	ldr	r3, [pc, #92]	@ (800169c <MX_TIM4_Init+0x94>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001644:	4b15      	ldr	r3, [pc, #84]	@ (800169c <MX_TIM4_Init+0x94>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800164a:	4814      	ldr	r0, [pc, #80]	@ (800169c <MX_TIM4_Init+0x94>)
 800164c:	f002 fb4c 	bl	8003ce8 <HAL_TIM_Base_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001656:	f7ff feab 	bl	80013b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	4619      	mov	r1, r3
 8001666:	480d      	ldr	r0, [pc, #52]	@ (800169c <MX_TIM4_Init+0x94>)
 8001668:	f002 fd96 	bl	8004198 <HAL_TIM_ConfigClockSource>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001672:	f7ff fe9d 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800167e:	463b      	mov	r3, r7
 8001680:	4619      	mov	r1, r3
 8001682:	4806      	ldr	r0, [pc, #24]	@ (800169c <MX_TIM4_Init+0x94>)
 8001684:	f003 f9dc 	bl	8004a40 <HAL_TIMEx_MasterConfigSynchronization>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800168e:	f7ff fe8f 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000388 	.word	0x20000388
 80016a0:	40000800 	.word	0x40000800

080016a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016b4:	d114      	bne.n	80016e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016b6:	4b19      	ldr	r3, [pc, #100]	@ (800171c <HAL_TIM_Base_MspInit+0x78>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a18      	ldr	r2, [pc, #96]	@ (800171c <HAL_TIM_Base_MspInit+0x78>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	61d3      	str	r3, [r2, #28]
 80016c2:	4b16      	ldr	r3, [pc, #88]	@ (800171c <HAL_TIM_Base_MspInit+0x78>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	201c      	movs	r0, #28
 80016d4:	f000 f9be 	bl	8001a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016d8:	201c      	movs	r0, #28
 80016da:	f000 f9e7 	bl	8001aac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80016de:	e018      	b.n	8001712 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001720 <HAL_TIM_Base_MspInit+0x7c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d113      	bne.n	8001712 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016ea:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <HAL_TIM_Base_MspInit+0x78>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	4a0b      	ldr	r2, [pc, #44]	@ (800171c <HAL_TIM_Base_MspInit+0x78>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	61d3      	str	r3, [r2, #28]
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <HAL_TIM_Base_MspInit+0x78>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	201e      	movs	r0, #30
 8001708:	f000 f9a4 	bl	8001a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800170c:	201e      	movs	r0, #30
 800170e:	f000 f9cd 	bl	8001aac <HAL_NVIC_EnableIRQ>
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	40000800 	.word	0x40000800

08001724 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001724:	f7ff ff1e 	bl	8001564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001728:	480b      	ldr	r0, [pc, #44]	@ (8001758 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800172a:	490c      	ldr	r1, [pc, #48]	@ (800175c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800172c:	4a0c      	ldr	r2, [pc, #48]	@ (8001760 <LoopFillZerobss+0x16>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a09      	ldr	r2, [pc, #36]	@ (8001764 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001740:	4c09      	ldr	r4, [pc, #36]	@ (8001768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174e:	f003 fa45 	bl	8004bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001752:	f7ff fca1 	bl	8001098 <main>
  bx lr
 8001756:	4770      	bx	lr
  ldr r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800175c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001760:	08004e1c 	.word	0x08004e1c
  ldr r2, =_sbss
 8001764:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001768:	20000440 	.word	0x20000440

0800176c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC1_2_IRQHandler>
	...

08001770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <HAL_Init+0x28>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a07      	ldr	r2, [pc, #28]	@ (8001798 <HAL_Init+0x28>)
 800177a:	f043 0310 	orr.w	r3, r3, #16
 800177e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001780:	2003      	movs	r0, #3
 8001782:	f000 f947 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001786:	200f      	movs	r0, #15
 8001788:	f000 f808 	bl	800179c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800178c:	f7ff fe78 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40022000 	.word	0x40022000

0800179c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a4:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_InitTick+0x54>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_InitTick+0x58>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f98e 	bl	8001adc <HAL_SYSTICK_Config>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00e      	b.n	80017e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b0f      	cmp	r3, #15
 80017ce:	d80a      	bhi.n	80017e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d0:	2200      	movs	r2, #0
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	f000 f93c 	bl	8001a54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017dc:	4a06      	ldr	r2, [pc, #24]	@ (80017f8 <HAL_InitTick+0x5c>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e000      	b.n	80017e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000020 	.word	0x20000020
 80017f4:	20000028 	.word	0x20000028
 80017f8:	20000024 	.word	0x20000024

080017fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <HAL_IncTick+0x1c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b05      	ldr	r3, [pc, #20]	@ (800181c <HAL_IncTick+0x20>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a03      	ldr	r2, [pc, #12]	@ (800181c <HAL_IncTick+0x20>)
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	20000028 	.word	0x20000028
 800181c:	2000043c 	.word	0x2000043c

08001820 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b02      	ldr	r3, [pc, #8]	@ (8001830 <HAL_GetTick+0x10>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	2000043c 	.word	0x2000043c

08001834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff fff0 	bl	8001820 <HAL_GetTick>
 8001840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184c:	d005      	beq.n	800185a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <HAL_Delay+0x44>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800185a:	bf00      	nop
 800185c:	f7ff ffe0 	bl	8001820 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	429a      	cmp	r2, r3
 800186a:	d8f7      	bhi.n	800185c <HAL_Delay+0x28>
  {
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000028 	.word	0x20000028

0800187c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001898:	4013      	ands	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ae:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <__NVIC_GetPriorityGrouping+0x18>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 0307 	and.w	r3, r3, #7
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db0b      	blt.n	800190a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	f003 021f 	and.w	r2, r3, #31
 80018f8:	4906      	ldr	r1, [pc, #24]	@ (8001914 <__NVIC_EnableIRQ+0x34>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	2001      	movs	r0, #1
 8001902:	fa00 f202 	lsl.w	r2, r0, r2
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	@ (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	@ (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	@ 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	@ 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff90 	bl	8001918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b07      	cmp	r3, #7
 8001a20:	d00f      	beq.n	8001a42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b06      	cmp	r3, #6
 8001a26:	d00c      	beq.n	8001a42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b05      	cmp	r3, #5
 8001a2c:	d009      	beq.n	8001a42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d006      	beq.n	8001a42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d003      	beq.n	8001a42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001a3a:	2191      	movs	r1, #145	@ 0x91
 8001a3c:	4804      	ldr	r0, [pc, #16]	@ (8001a50 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001a3e:	f7ff fcbd 	bl	80013bc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ff1a 	bl	800187c <__NVIC_SetPriorityGrouping>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	08004c3c 	.word	0x08004c3c

08001a54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d903      	bls.n	8001a74 <HAL_NVIC_SetPriority+0x20>
 8001a6c:	21a9      	movs	r1, #169	@ 0xa9
 8001a6e:	480e      	ldr	r0, [pc, #56]	@ (8001aa8 <HAL_NVIC_SetPriority+0x54>)
 8001a70:	f7ff fca4 	bl	80013bc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	d903      	bls.n	8001a82 <HAL_NVIC_SetPriority+0x2e>
 8001a7a:	21aa      	movs	r1, #170	@ 0xaa
 8001a7c:	480a      	ldr	r0, [pc, #40]	@ (8001aa8 <HAL_NVIC_SetPriority+0x54>)
 8001a7e:	f7ff fc9d 	bl	80013bc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a82:	f7ff ff1f 	bl	80018c4 <__NVIC_GetPriorityGrouping>
 8001a86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	68b9      	ldr	r1, [r7, #8]
 8001a8c:	6978      	ldr	r0, [r7, #20]
 8001a8e:	f7ff ff6d 	bl	800196c <NVIC_EncodePriority>
 8001a92:	4602      	mov	r2, r0
 8001a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff3c 	bl	8001918 <__NVIC_SetPriority>
}
 8001aa0:	bf00      	nop
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	08004c3c 	.word	0x08004c3c

08001aac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	da03      	bge.n	8001ac6 <HAL_NVIC_EnableIRQ+0x1a>
 8001abe:	21bd      	movs	r1, #189	@ 0xbd
 8001ac0:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <HAL_NVIC_EnableIRQ+0x2c>)
 8001ac2:	f7ff fc7b 	bl	80013bc <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ff08 	bl	80018e0 <__NVIC_EnableIRQ>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	08004c3c 	.word	0x08004c3c

08001adc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff73 	bl	80019d0 <SysTick_Config>
 8001aea:	4603      	mov	r3, r0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	@ 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a96      	ldr	r2, [pc, #600]	@ (8001d64 <HAL_GPIO_Init+0x270>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0x42>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a95      	ldr	r2, [pc, #596]	@ (8001d68 <HAL_GPIO_Init+0x274>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00f      	beq.n	8001b36 <HAL_GPIO_Init+0x42>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a94      	ldr	r2, [pc, #592]	@ (8001d6c <HAL_GPIO_Init+0x278>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00b      	beq.n	8001b36 <HAL_GPIO_Init+0x42>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a93      	ldr	r2, [pc, #588]	@ (8001d70 <HAL_GPIO_Init+0x27c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d007      	beq.n	8001b36 <HAL_GPIO_Init+0x42>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a92      	ldr	r2, [pc, #584]	@ (8001d74 <HAL_GPIO_Init+0x280>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x42>
 8001b2e:	21bd      	movs	r1, #189	@ 0xbd
 8001b30:	4891      	ldr	r0, [pc, #580]	@ (8001d78 <HAL_GPIO_Init+0x284>)
 8001b32:	f7ff fc43 	bl	80013bc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <HAL_GPIO_Init+0x56>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b48:	d303      	bcc.n	8001b52 <HAL_GPIO_Init+0x5e>
 8001b4a:	21be      	movs	r1, #190	@ 0xbe
 8001b4c:	488a      	ldr	r0, [pc, #552]	@ (8001d78 <HAL_GPIO_Init+0x284>)
 8001b4e:	f7ff fc35 	bl	80013bc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 821d 	beq.w	8001f96 <HAL_GPIO_Init+0x4a2>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	f000 8218 	beq.w	8001f96 <HAL_GPIO_Init+0x4a2>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b11      	cmp	r3, #17
 8001b6c:	f000 8213 	beq.w	8001f96 <HAL_GPIO_Init+0x4a2>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	f000 820e 	beq.w	8001f96 <HAL_GPIO_Init+0x4a2>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b12      	cmp	r3, #18
 8001b80:	f000 8209 	beq.w	8001f96 <HAL_GPIO_Init+0x4a2>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4a7c      	ldr	r2, [pc, #496]	@ (8001d7c <HAL_GPIO_Init+0x288>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	f000 8203 	beq.w	8001f96 <HAL_GPIO_Init+0x4a2>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	4a7a      	ldr	r2, [pc, #488]	@ (8001d80 <HAL_GPIO_Init+0x28c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	f000 81fd 	beq.w	8001f96 <HAL_GPIO_Init+0x4a2>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4a78      	ldr	r2, [pc, #480]	@ (8001d84 <HAL_GPIO_Init+0x290>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	f000 81f7 	beq.w	8001f96 <HAL_GPIO_Init+0x4a2>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4a76      	ldr	r2, [pc, #472]	@ (8001d88 <HAL_GPIO_Init+0x294>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	f000 81f1 	beq.w	8001f96 <HAL_GPIO_Init+0x4a2>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	4a74      	ldr	r2, [pc, #464]	@ (8001d8c <HAL_GPIO_Init+0x298>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	f000 81eb 	beq.w	8001f96 <HAL_GPIO_Init+0x4a2>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a72      	ldr	r2, [pc, #456]	@ (8001d90 <HAL_GPIO_Init+0x29c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	f000 81e5 	beq.w	8001f96 <HAL_GPIO_Init+0x4a2>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	f000 81e0 	beq.w	8001f96 <HAL_GPIO_Init+0x4a2>
 8001bd6:	21bf      	movs	r1, #191	@ 0xbf
 8001bd8:	4867      	ldr	r0, [pc, #412]	@ (8001d78 <HAL_GPIO_Init+0x284>)
 8001bda:	f7ff fbef 	bl	80013bc <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bde:	e1da      	b.n	8001f96 <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001be0:	2201      	movs	r2, #1
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	f040 81c9 	bne.w	8001f90 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a58      	ldr	r2, [pc, #352]	@ (8001d64 <HAL_GPIO_Init+0x270>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_GPIO_Init+0x13a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a57      	ldr	r2, [pc, #348]	@ (8001d68 <HAL_GPIO_Init+0x274>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00f      	beq.n	8001c2e <HAL_GPIO_Init+0x13a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a56      	ldr	r2, [pc, #344]	@ (8001d6c <HAL_GPIO_Init+0x278>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00b      	beq.n	8001c2e <HAL_GPIO_Init+0x13a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a55      	ldr	r2, [pc, #340]	@ (8001d70 <HAL_GPIO_Init+0x27c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d007      	beq.n	8001c2e <HAL_GPIO_Init+0x13a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a54      	ldr	r2, [pc, #336]	@ (8001d74 <HAL_GPIO_Init+0x280>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x13a>
 8001c26:	21cd      	movs	r1, #205	@ 0xcd
 8001c28:	4853      	ldr	r0, [pc, #332]	@ (8001d78 <HAL_GPIO_Init+0x284>)
 8001c2a:	f7ff fbc7 	bl	80013bc <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4a57      	ldr	r2, [pc, #348]	@ (8001d90 <HAL_GPIO_Init+0x29c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	f000 80c2 	beq.w	8001dbe <HAL_GPIO_Init+0x2ca>
 8001c3a:	4a55      	ldr	r2, [pc, #340]	@ (8001d90 <HAL_GPIO_Init+0x29c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	f200 80e8 	bhi.w	8001e12 <HAL_GPIO_Init+0x31e>
 8001c42:	4a50      	ldr	r2, [pc, #320]	@ (8001d84 <HAL_GPIO_Init+0x290>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	f000 80ba 	beq.w	8001dbe <HAL_GPIO_Init+0x2ca>
 8001c4a:	4a4e      	ldr	r2, [pc, #312]	@ (8001d84 <HAL_GPIO_Init+0x290>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	f200 80e0 	bhi.w	8001e12 <HAL_GPIO_Init+0x31e>
 8001c52:	4a4e      	ldr	r2, [pc, #312]	@ (8001d8c <HAL_GPIO_Init+0x298>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	f000 80b2 	beq.w	8001dbe <HAL_GPIO_Init+0x2ca>
 8001c5a:	4a4c      	ldr	r2, [pc, #304]	@ (8001d8c <HAL_GPIO_Init+0x298>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	f200 80d8 	bhi.w	8001e12 <HAL_GPIO_Init+0x31e>
 8001c62:	4a47      	ldr	r2, [pc, #284]	@ (8001d80 <HAL_GPIO_Init+0x28c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	f000 80aa 	beq.w	8001dbe <HAL_GPIO_Init+0x2ca>
 8001c6a:	4a45      	ldr	r2, [pc, #276]	@ (8001d80 <HAL_GPIO_Init+0x28c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	f200 80d0 	bhi.w	8001e12 <HAL_GPIO_Init+0x31e>
 8001c72:	4a45      	ldr	r2, [pc, #276]	@ (8001d88 <HAL_GPIO_Init+0x294>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	f000 80a2 	beq.w	8001dbe <HAL_GPIO_Init+0x2ca>
 8001c7a:	4a43      	ldr	r2, [pc, #268]	@ (8001d88 <HAL_GPIO_Init+0x294>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	f200 80c8 	bhi.w	8001e12 <HAL_GPIO_Init+0x31e>
 8001c82:	2b12      	cmp	r3, #18
 8001c84:	d82c      	bhi.n	8001ce0 <HAL_GPIO_Init+0x1ec>
 8001c86:	2b12      	cmp	r3, #18
 8001c88:	f200 80c3 	bhi.w	8001e12 <HAL_GPIO_Init+0x31e>
 8001c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c94 <HAL_GPIO_Init+0x1a0>)
 8001c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c92:	bf00      	nop
 8001c94:	08001dbf 	.word	0x08001dbf
 8001c98:	08001ce9 	.word	0x08001ce9
 8001c9c:	08001d3b 	.word	0x08001d3b
 8001ca0:	08001e0d 	.word	0x08001e0d
 8001ca4:	08001e13 	.word	0x08001e13
 8001ca8:	08001e13 	.word	0x08001e13
 8001cac:	08001e13 	.word	0x08001e13
 8001cb0:	08001e13 	.word	0x08001e13
 8001cb4:	08001e13 	.word	0x08001e13
 8001cb8:	08001e13 	.word	0x08001e13
 8001cbc:	08001e13 	.word	0x08001e13
 8001cc0:	08001e13 	.word	0x08001e13
 8001cc4:	08001e13 	.word	0x08001e13
 8001cc8:	08001e13 	.word	0x08001e13
 8001ccc:	08001e13 	.word	0x08001e13
 8001cd0:	08001e13 	.word	0x08001e13
 8001cd4:	08001e13 	.word	0x08001e13
 8001cd8:	08001d11 	.word	0x08001d11
 8001cdc:	08001d95 	.word	0x08001d95
 8001ce0:	4a26      	ldr	r2, [pc, #152]	@ (8001d7c <HAL_GPIO_Init+0x288>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d06b      	beq.n	8001dbe <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ce6:	e094      	b.n	8001e12 <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d00b      	beq.n	8001d08 <HAL_GPIO_Init+0x214>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d007      	beq.n	8001d08 <HAL_GPIO_Init+0x214>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x214>
 8001d00:	21d5      	movs	r1, #213	@ 0xd5
 8001d02:	481d      	ldr	r0, [pc, #116]	@ (8001d78 <HAL_GPIO_Init+0x284>)
 8001d04:	f7ff fb5a 	bl	80013bc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	623b      	str	r3, [r7, #32]
          break;
 8001d0e:	e081      	b.n	8001e14 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d00b      	beq.n	8001d30 <HAL_GPIO_Init+0x23c>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d007      	beq.n	8001d30 <HAL_GPIO_Init+0x23c>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x23c>
 8001d28:	21dc      	movs	r1, #220	@ 0xdc
 8001d2a:	4813      	ldr	r0, [pc, #76]	@ (8001d78 <HAL_GPIO_Init+0x284>)
 8001d2c:	f7ff fb46 	bl	80013bc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	3304      	adds	r3, #4
 8001d36:	623b      	str	r3, [r7, #32]
          break;
 8001d38:	e06c      	b.n	8001e14 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d00b      	beq.n	8001d5a <HAL_GPIO_Init+0x266>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x266>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x266>
 8001d52:	21e3      	movs	r1, #227	@ 0xe3
 8001d54:	4808      	ldr	r0, [pc, #32]	@ (8001d78 <HAL_GPIO_Init+0x284>)
 8001d56:	f7ff fb31 	bl	80013bc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	3308      	adds	r3, #8
 8001d60:	623b      	str	r3, [r7, #32]
          break;
 8001d62:	e057      	b.n	8001e14 <HAL_GPIO_Init+0x320>
 8001d64:	40010800 	.word	0x40010800
 8001d68:	40010c00 	.word	0x40010c00
 8001d6c:	40011000 	.word	0x40011000
 8001d70:	40011400 	.word	0x40011400
 8001d74:	40011800 	.word	0x40011800
 8001d78:	08004c78 	.word	0x08004c78
 8001d7c:	10110000 	.word	0x10110000
 8001d80:	10210000 	.word	0x10210000
 8001d84:	10310000 	.word	0x10310000
 8001d88:	10120000 	.word	0x10120000
 8001d8c:	10220000 	.word	0x10220000
 8001d90:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d00b      	beq.n	8001db4 <HAL_GPIO_Init+0x2c0>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d007      	beq.n	8001db4 <HAL_GPIO_Init+0x2c0>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x2c0>
 8001dac:	21ea      	movs	r1, #234	@ 0xea
 8001dae:	4880      	ldr	r0, [pc, #512]	@ (8001fb0 <HAL_GPIO_Init+0x4bc>)
 8001db0:	f7ff fb04 	bl	80013bc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	330c      	adds	r3, #12
 8001dba:	623b      	str	r3, [r7, #32]
          break;
 8001dbc:	e02a      	b.n	8001e14 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_GPIO_Init+0x2ea>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d007      	beq.n	8001dde <HAL_GPIO_Init+0x2ea>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x2ea>
 8001dd6:	21f7      	movs	r1, #247	@ 0xf7
 8001dd8:	4875      	ldr	r0, [pc, #468]	@ (8001fb0 <HAL_GPIO_Init+0x4bc>)
 8001dda:	f7ff faef 	bl	80013bc <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d102      	bne.n	8001dec <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001de6:	2304      	movs	r3, #4
 8001de8:	623b      	str	r3, [r7, #32]
          break;
 8001dea:	e013      	b.n	8001e14 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d105      	bne.n	8001e00 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df4:	2308      	movs	r3, #8
 8001df6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	611a      	str	r2, [r3, #16]
          break;
 8001dfe:	e009      	b.n	8001e14 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e00:	2308      	movs	r3, #8
 8001e02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	615a      	str	r2, [r3, #20]
          break;
 8001e0a:	e003      	b.n	8001e14 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	623b      	str	r3, [r7, #32]
          break;
 8001e10:	e000      	b.n	8001e14 <HAL_GPIO_Init+0x320>
          break;
 8001e12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2bff      	cmp	r3, #255	@ 0xff
 8001e18:	d801      	bhi.n	8001e1e <HAL_GPIO_Init+0x32a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	e001      	b.n	8001e22 <HAL_GPIO_Init+0x32e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3304      	adds	r3, #4
 8001e22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2bff      	cmp	r3, #255	@ 0xff
 8001e28:	d802      	bhi.n	8001e30 <HAL_GPIO_Init+0x33c>
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	e002      	b.n	8001e36 <HAL_GPIO_Init+0x342>
 8001e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e32:	3b08      	subs	r3, #8
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	210f      	movs	r1, #15
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	401a      	ands	r2, r3
 8001e48:	6a39      	ldr	r1, [r7, #32]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	431a      	orrs	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8096 	beq.w	8001f90 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e64:	4b53      	ldr	r3, [pc, #332]	@ (8001fb4 <HAL_GPIO_Init+0x4c0>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a52      	ldr	r2, [pc, #328]	@ (8001fb4 <HAL_GPIO_Init+0x4c0>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b50      	ldr	r3, [pc, #320]	@ (8001fb4 <HAL_GPIO_Init+0x4c0>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e7c:	4a4e      	ldr	r2, [pc, #312]	@ (8001fb8 <HAL_GPIO_Init+0x4c4>)
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	220f      	movs	r2, #15
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a46      	ldr	r2, [pc, #280]	@ (8001fbc <HAL_GPIO_Init+0x4c8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d013      	beq.n	8001ed0 <HAL_GPIO_Init+0x3dc>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a45      	ldr	r2, [pc, #276]	@ (8001fc0 <HAL_GPIO_Init+0x4cc>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00d      	beq.n	8001ecc <HAL_GPIO_Init+0x3d8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a44      	ldr	r2, [pc, #272]	@ (8001fc4 <HAL_GPIO_Init+0x4d0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d007      	beq.n	8001ec8 <HAL_GPIO_Init+0x3d4>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a43      	ldr	r2, [pc, #268]	@ (8001fc8 <HAL_GPIO_Init+0x4d4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_GPIO_Init+0x3d0>
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e006      	b.n	8001ed2 <HAL_GPIO_Init+0x3de>
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	e004      	b.n	8001ed2 <HAL_GPIO_Init+0x3de>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e002      	b.n	8001ed2 <HAL_GPIO_Init+0x3de>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_GPIO_Init+0x3de>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ed4:	f002 0203 	and.w	r2, r2, #3
 8001ed8:	0092      	lsls	r2, r2, #2
 8001eda:	4093      	lsls	r3, r2
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ee2:	4935      	ldr	r1, [pc, #212]	@ (8001fb8 <HAL_GPIO_Init+0x4c4>)
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	3302      	adds	r3, #2
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001efc:	4b33      	ldr	r3, [pc, #204]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	4932      	ldr	r1, [pc, #200]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	608b      	str	r3, [r1, #8]
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f0a:	4b30      	ldr	r3, [pc, #192]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	492e      	ldr	r1, [pc, #184]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d006      	beq.n	8001f32 <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f24:	4b29      	ldr	r3, [pc, #164]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	4928      	ldr	r1, [pc, #160]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60cb      	str	r3, [r1, #12]
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f32:	4b26      	ldr	r3, [pc, #152]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	4924      	ldr	r1, [pc, #144]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	491e      	ldr	r1, [pc, #120]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	491a      	ldr	r1, [pc, #104]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f74:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4914      	ldr	r1, [pc, #80]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f82:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	4910      	ldr	r1, [pc, #64]	@ (8001fcc <HAL_GPIO_Init+0x4d8>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f92:	3301      	adds	r3, #1
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f47f ae1d 	bne.w	8001be0 <HAL_GPIO_Init+0xec>
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	3728      	adds	r7, #40	@ 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	08004c78 	.word	0x08004c78
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	40010800 	.word	0x40010800
 8001fc0:	40010c00 	.word	0x40010c00
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	40011400 	.word	0x40011400
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001fdc:	887b      	ldrh	r3, [r7, #2]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d104      	bne.n	8001fec <HAL_GPIO_ReadPin+0x1c>
 8001fe2:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 8001fe6:	4809      	ldr	r0, [pc, #36]	@ (800200c <HAL_GPIO_ReadPin+0x3c>)
 8001fe8:	f7ff f9e8 	bl	80013bc <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	887b      	ldrh	r3, [r7, #2]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	e001      	b.n	8002002 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	08004c78 	.word	0x08004c78

08002010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
 800201c:	4613      	mov	r3, r2
 800201e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d104      	bne.n	8002030 <HAL_GPIO_WritePin+0x20>
 8002026:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 800202a:	480e      	ldr	r0, [pc, #56]	@ (8002064 <HAL_GPIO_WritePin+0x54>)
 800202c:	f7ff f9c6 	bl	80013bc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_GPIO_WritePin+0x36>
 8002036:	787b      	ldrb	r3, [r7, #1]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d004      	beq.n	8002046 <HAL_GPIO_WritePin+0x36>
 800203c:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8002040:	4808      	ldr	r0, [pc, #32]	@ (8002064 <HAL_GPIO_WritePin+0x54>)
 8002042:	f7ff f9bb 	bl	80013bc <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002046:	787b      	ldrb	r3, [r7, #1]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204c:	887a      	ldrh	r2, [r7, #2]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002052:	e003      	b.n	800205c <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002054:	887b      	ldrh	r3, [r7, #2]
 8002056:	041a      	lsls	r2, r3, #16
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	611a      	str	r2, [r3, #16]
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	08004c78 	.word	0x08004c78

08002068 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002074:	887b      	ldrh	r3, [r7, #2]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d104      	bne.n	8002084 <HAL_GPIO_TogglePin+0x1c>
 800207a:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 800207e:	480a      	ldr	r0, [pc, #40]	@ (80020a8 <HAL_GPIO_TogglePin+0x40>)
 8002080:	f7ff f99c 	bl	80013bc <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43d9      	mvns	r1, r3
 8002096:	887b      	ldrh	r3, [r7, #2]
 8002098:	400b      	ands	r3, r1
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	611a      	str	r2, [r3, #16]
}
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	08004c78 	.word	0x08004c78

080020ac <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80020b0:	4b03      	ldr	r3, [pc, #12]	@ (80020c0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	420e0020 	.word	0x420e0020

080020c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e35a      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d01c      	beq.n	8002118 <HAL_RCC_OscConfig+0x54>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d116      	bne.n	8002118 <HAL_RCC_OscConfig+0x54>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d110      	bne.n	8002118 <HAL_RCC_OscConfig+0x54>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10a      	bne.n	8002118 <HAL_RCC_OscConfig+0x54>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d104      	bne.n	8002118 <HAL_RCC_OscConfig+0x54>
 800210e:	f240 1165 	movw	r1, #357	@ 0x165
 8002112:	488f      	ldr	r0, [pc, #572]	@ (8002350 <HAL_RCC_OscConfig+0x28c>)
 8002114:	f7ff f952 	bl	80013bc <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 809a 	beq.w	800225a <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00e      	beq.n	800214c <HAL_RCC_OscConfig+0x88>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002136:	d009      	beq.n	800214c <HAL_RCC_OscConfig+0x88>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002140:	d004      	beq.n	800214c <HAL_RCC_OscConfig+0x88>
 8002142:	f240 116b 	movw	r1, #363	@ 0x16b
 8002146:	4882      	ldr	r0, [pc, #520]	@ (8002350 <HAL_RCC_OscConfig+0x28c>)
 8002148:	f7ff f938 	bl	80013bc <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800214c:	4b81      	ldr	r3, [pc, #516]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b04      	cmp	r3, #4
 8002156:	d00c      	beq.n	8002172 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002158:	4b7e      	ldr	r3, [pc, #504]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d112      	bne.n	800218a <HAL_RCC_OscConfig+0xc6>
 8002164:	4b7b      	ldr	r3, [pc, #492]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002170:	d10b      	bne.n	800218a <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002172:	4b78      	ldr	r3, [pc, #480]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d06c      	beq.n	8002258 <HAL_RCC_OscConfig+0x194>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d168      	bne.n	8002258 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e300      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0xde>
 8002194:	4b6f      	ldr	r3, [pc, #444]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a6e      	ldr	r2, [pc, #440]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	e02e      	b.n	8002200 <HAL_RCC_OscConfig+0x13c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x100>
 80021aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a69      	ldr	r2, [pc, #420]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80021b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b67      	ldr	r3, [pc, #412]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a66      	ldr	r2, [pc, #408]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80021bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0x13c>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x124>
 80021ce:	4b61      	ldr	r3, [pc, #388]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a60      	ldr	r2, [pc, #384]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b5e      	ldr	r3, [pc, #376]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a5d      	ldr	r2, [pc, #372]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0x13c>
 80021e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a59      	ldr	r2, [pc, #356]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b57      	ldr	r3, [pc, #348]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a56      	ldr	r2, [pc, #344]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fb0a 	bl	8001820 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff fb06 	bl	8001820 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	@ 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e2b4      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b4c      	ldr	r3, [pc, #304]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x14c>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff faf6 	bl	8001820 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff faf2 	bl	8001820 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e2a0      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b42      	ldr	r3, [pc, #264]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x174>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8080 	beq.w	8002368 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_RCC_OscConfig+0x1be>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d004      	beq.n	8002282 <HAL_RCC_OscConfig+0x1be>
 8002278:	f240 119f 	movw	r1, #415	@ 0x19f
 800227c:	4834      	ldr	r0, [pc, #208]	@ (8002350 <HAL_RCC_OscConfig+0x28c>)
 800227e:	f7ff f89d 	bl	80013bc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	2b1f      	cmp	r3, #31
 8002288:	d904      	bls.n	8002294 <HAL_RCC_OscConfig+0x1d0>
 800228a:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 800228e:	4830      	ldr	r0, [pc, #192]	@ (8002350 <HAL_RCC_OscConfig+0x28c>)
 8002290:	f7ff f894 	bl	80013bc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002294:	4b2f      	ldr	r3, [pc, #188]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00b      	beq.n	80022b8 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d11c      	bne.n	80022e6 <HAL_RCC_OscConfig+0x222>
 80022ac:	4b29      	ldr	r3, [pc, #164]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d116      	bne.n	80022e6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b8:	4b26      	ldr	r3, [pc, #152]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_OscConfig+0x20c>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e25d      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d0:	4b20      	ldr	r3, [pc, #128]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	491d      	ldr	r1, [pc, #116]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e4:	e040      	b.n	8002368 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d020      	beq.n	8002330 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002358 <HAL_RCC_OscConfig+0x294>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff fa94 	bl	8001820 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fc:	f7ff fa90 	bl	8001820 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e23e      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230e:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231a:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	490a      	ldr	r1, [pc, #40]	@ (8002354 <HAL_RCC_OscConfig+0x290>)
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]
 800232e:	e01b      	b.n	8002368 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002330:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <HAL_RCC_OscConfig+0x294>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7ff fa73 	bl	8001820 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233c:	e00e      	b.n	800235c <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233e:	f7ff fa6f 	bl	8001820 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d907      	bls.n	800235c <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e21d      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
 8002350:	08004cb4 	.word	0x08004cb4
 8002354:	40021000 	.word	0x40021000
 8002358:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235c:	4b7d      	ldr	r3, [pc, #500]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ea      	bne.n	800233e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d040      	beq.n	80023f6 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_OscConfig+0x2ca>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d004      	beq.n	800238e <HAL_RCC_OscConfig+0x2ca>
 8002384:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8002388:	4873      	ldr	r0, [pc, #460]	@ (8002558 <HAL_RCC_OscConfig+0x494>)
 800238a:	f7ff f817 	bl	80013bc <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d019      	beq.n	80023ca <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002396:	4b71      	ldr	r3, [pc, #452]	@ (800255c <HAL_RCC_OscConfig+0x498>)
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239c:	f7ff fa40 	bl	8001820 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a4:	f7ff fa3c 	bl	8001820 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e1ea      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b6:	4b67      	ldr	r3, [pc, #412]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 80023b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023c2:	2001      	movs	r0, #1
 80023c4:	f000 fbee 	bl	8002ba4 <RCC_Delay>
 80023c8:	e015      	b.n	80023f6 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ca:	4b64      	ldr	r3, [pc, #400]	@ (800255c <HAL_RCC_OscConfig+0x498>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d0:	f7ff fa26 	bl	8001820 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d8:	f7ff fa22 	bl	8001820 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e1d0      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 80bf 	beq.w	8002582 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002404:	2300      	movs	r3, #0
 8002406:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00c      	beq.n	800242a <HAL_RCC_OscConfig+0x366>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d008      	beq.n	800242a <HAL_RCC_OscConfig+0x366>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b05      	cmp	r3, #5
 800241e:	d004      	beq.n	800242a <HAL_RCC_OscConfig+0x366>
 8002420:	f240 210f 	movw	r1, #527	@ 0x20f
 8002424:	484c      	ldr	r0, [pc, #304]	@ (8002558 <HAL_RCC_OscConfig+0x494>)
 8002426:	f7fe ffc9 	bl	80013bc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242a:	4b4a      	ldr	r3, [pc, #296]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10d      	bne.n	8002452 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	4b47      	ldr	r3, [pc, #284]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	4a46      	ldr	r2, [pc, #280]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002440:	61d3      	str	r3, [r2, #28]
 8002442:	4b44      	ldr	r3, [pc, #272]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244e:	2301      	movs	r3, #1
 8002450:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002452:	4b43      	ldr	r3, [pc, #268]	@ (8002560 <HAL_RCC_OscConfig+0x49c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d118      	bne.n	8002490 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245e:	4b40      	ldr	r3, [pc, #256]	@ (8002560 <HAL_RCC_OscConfig+0x49c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a3f      	ldr	r2, [pc, #252]	@ (8002560 <HAL_RCC_OscConfig+0x49c>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246a:	f7ff f9d9 	bl	8001820 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002472:	f7ff f9d5 	bl	8001820 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b64      	cmp	r3, #100	@ 0x64
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e183      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <HAL_RCC_OscConfig+0x49c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x3e2>
 8002498:	4b2e      	ldr	r3, [pc, #184]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	4a2d      	ldr	r2, [pc, #180]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6213      	str	r3, [r2, #32]
 80024a4:	e02d      	b.n	8002502 <HAL_RCC_OscConfig+0x43e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x404>
 80024ae:	4b29      	ldr	r3, [pc, #164]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4a28      	ldr	r2, [pc, #160]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	6213      	str	r3, [r2, #32]
 80024ba:	4b26      	ldr	r3, [pc, #152]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4a25      	ldr	r2, [pc, #148]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 80024c0:	f023 0304 	bic.w	r3, r3, #4
 80024c4:	6213      	str	r3, [r2, #32]
 80024c6:	e01c      	b.n	8002502 <HAL_RCC_OscConfig+0x43e>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d10c      	bne.n	80024ea <HAL_RCC_OscConfig+0x426>
 80024d0:	4b20      	ldr	r3, [pc, #128]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 80024d6:	f043 0304 	orr.w	r3, r3, #4
 80024da:	6213      	str	r3, [r2, #32]
 80024dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6213      	str	r3, [r2, #32]
 80024e8:	e00b      	b.n	8002502 <HAL_RCC_OscConfig+0x43e>
 80024ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a19      	ldr	r2, [pc, #100]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	6213      	str	r3, [r2, #32]
 80024f6:	4b17      	ldr	r3, [pc, #92]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4a16      	ldr	r2, [pc, #88]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d015      	beq.n	8002536 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250a:	f7ff f989 	bl	8001820 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7ff f985 	bl	8001820 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e131      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002528:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <HAL_RCC_OscConfig+0x490>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ee      	beq.n	8002512 <HAL_RCC_OscConfig+0x44e>
 8002534:	e01c      	b.n	8002570 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002536:	f7ff f973 	bl	8001820 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253c:	e012      	b.n	8002564 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253e:	f7ff f96f 	bl	8001820 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d909      	bls.n	8002564 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e11b      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
 8002554:	40021000 	.word	0x40021000
 8002558:	08004cb4 	.word	0x08004cb4
 800255c:	42420480 	.word	0x42420480
 8002560:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	4b8b      	ldr	r3, [pc, #556]	@ (8002794 <HAL_RCC_OscConfig+0x6d0>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1e6      	bne.n	800253e <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002570:	7dfb      	ldrb	r3, [r7, #23]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002576:	4b87      	ldr	r3, [pc, #540]	@ (8002794 <HAL_RCC_OscConfig+0x6d0>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4a86      	ldr	r2, [pc, #536]	@ (8002794 <HAL_RCC_OscConfig+0x6d0>)
 800257c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002580:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00c      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4e0>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d008      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4e0>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d004      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4e0>
 800259a:	f240 21ad 	movw	r1, #685	@ 0x2ad
 800259e:	487e      	ldr	r0, [pc, #504]	@ (8002798 <HAL_RCC_OscConfig+0x6d4>)
 80025a0:	f7fe ff0c 	bl	80013bc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80ee 	beq.w	800278a <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ae:	4b79      	ldr	r3, [pc, #484]	@ (8002794 <HAL_RCC_OscConfig+0x6d0>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	f000 80ce 	beq.w	8002758 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	f040 80b2 	bne.w	800272a <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <HAL_RCC_OscConfig+0x51e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025d6:	d004      	beq.n	80025e2 <HAL_RCC_OscConfig+0x51e>
 80025d8:	f240 21b6 	movw	r1, #694	@ 0x2b6
 80025dc:	486e      	ldr	r0, [pc, #440]	@ (8002798 <HAL_RCC_OscConfig+0x6d4>)
 80025de:	f7fe feed 	bl	80013bc <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d04a      	beq.n	8002680 <HAL_RCC_OscConfig+0x5bc>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025f2:	d045      	beq.n	8002680 <HAL_RCC_OscConfig+0x5bc>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80025fc:	d040      	beq.n	8002680 <HAL_RCC_OscConfig+0x5bc>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002602:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002606:	d03b      	beq.n	8002680 <HAL_RCC_OscConfig+0x5bc>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002610:	d036      	beq.n	8002680 <HAL_RCC_OscConfig+0x5bc>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800261a:	d031      	beq.n	8002680 <HAL_RCC_OscConfig+0x5bc>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002624:	d02c      	beq.n	8002680 <HAL_RCC_OscConfig+0x5bc>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800262e:	d027      	beq.n	8002680 <HAL_RCC_OscConfig+0x5bc>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002638:	d022      	beq.n	8002680 <HAL_RCC_OscConfig+0x5bc>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002642:	d01d      	beq.n	8002680 <HAL_RCC_OscConfig+0x5bc>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800264c:	d018      	beq.n	8002680 <HAL_RCC_OscConfig+0x5bc>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002652:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002656:	d013      	beq.n	8002680 <HAL_RCC_OscConfig+0x5bc>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002660:	d00e      	beq.n	8002680 <HAL_RCC_OscConfig+0x5bc>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 800266a:	d009      	beq.n	8002680 <HAL_RCC_OscConfig+0x5bc>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002670:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8002674:	d004      	beq.n	8002680 <HAL_RCC_OscConfig+0x5bc>
 8002676:	f240 21b7 	movw	r1, #695	@ 0x2b7
 800267a:	4847      	ldr	r0, [pc, #284]	@ (8002798 <HAL_RCC_OscConfig+0x6d4>)
 800267c:	f7fe fe9e 	bl	80013bc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002680:	4b46      	ldr	r3, [pc, #280]	@ (800279c <HAL_RCC_OscConfig+0x6d8>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7ff f8cb 	bl	8001820 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268e:	f7ff f8c7 	bl	8001820 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e075      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002794 <HAL_RCC_OscConfig+0x6d0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b4:	d116      	bne.n	80026e4 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_RCC_OscConfig+0x60e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026c6:	d004      	beq.n	80026d2 <HAL_RCC_OscConfig+0x60e>
 80026c8:	f240 21cd 	movw	r1, #717	@ 0x2cd
 80026cc:	4832      	ldr	r0, [pc, #200]	@ (8002798 <HAL_RCC_OscConfig+0x6d4>)
 80026ce:	f7fe fe75 	bl	80013bc <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026d2:	4b30      	ldr	r3, [pc, #192]	@ (8002794 <HAL_RCC_OscConfig+0x6d0>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	492d      	ldr	r1, [pc, #180]	@ (8002794 <HAL_RCC_OscConfig+0x6d0>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002794 <HAL_RCC_OscConfig+0x6d0>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a19      	ldr	r1, [r3, #32]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	430b      	orrs	r3, r1
 80026f6:	4927      	ldr	r1, [pc, #156]	@ (8002794 <HAL_RCC_OscConfig+0x6d0>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026fc:	4b27      	ldr	r3, [pc, #156]	@ (800279c <HAL_RCC_OscConfig+0x6d8>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002702:	f7ff f88d 	bl	8001820 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270a:	f7ff f889 	bl	8001820 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e037      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800271c:	4b1d      	ldr	r3, [pc, #116]	@ (8002794 <HAL_RCC_OscConfig+0x6d0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x646>
 8002728:	e02f      	b.n	800278a <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b1c      	ldr	r3, [pc, #112]	@ (800279c <HAL_RCC_OscConfig+0x6d8>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7ff f876 	bl	8001820 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002738:	f7ff f872 	bl	8001820 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e020      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274a:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <HAL_RCC_OscConfig+0x6d0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x674>
 8002756:	e018      	b.n	800278a <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e013      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002764:	4b0b      	ldr	r3, [pc, #44]	@ (8002794 <HAL_RCC_OscConfig+0x6d0>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	429a      	cmp	r2, r3
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d001      	beq.n	800278a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40021000 	.word	0x40021000
 8002798:	08004cb4 	.word	0x08004cb4
 800279c:	42420060 	.word	0x42420060

080027a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e176      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d116      	bne.n	80027ee <HAL_RCC_ClockConfig+0x4e>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d110      	bne.n	80027ee <HAL_RCC_ClockConfig+0x4e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <HAL_RCC_ClockConfig+0x4e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d104      	bne.n	80027ee <HAL_RCC_ClockConfig+0x4e>
 80027e4:	f240 3136 	movw	r1, #822	@ 0x336
 80027e8:	4874      	ldr	r0, [pc, #464]	@ (80029bc <HAL_RCC_ClockConfig+0x21c>)
 80027ea:	f7fe fde7 	bl	80013bc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_RCC_ClockConfig+0x6a>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d007      	beq.n	800280a <HAL_RCC_ClockConfig+0x6a>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d004      	beq.n	800280a <HAL_RCC_ClockConfig+0x6a>
 8002800:	f240 3137 	movw	r1, #823	@ 0x337
 8002804:	486d      	ldr	r0, [pc, #436]	@ (80029bc <HAL_RCC_ClockConfig+0x21c>)
 8002806:	f7fe fdd9 	bl	80013bc <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800280a:	4b6d      	ldr	r3, [pc, #436]	@ (80029c0 <HAL_RCC_ClockConfig+0x220>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d910      	bls.n	800283a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002818:	4b69      	ldr	r3, [pc, #420]	@ (80029c0 <HAL_RCC_ClockConfig+0x220>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 0207 	bic.w	r2, r3, #7
 8002820:	4967      	ldr	r1, [pc, #412]	@ (80029c0 <HAL_RCC_ClockConfig+0x220>)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	4313      	orrs	r3, r2
 8002826:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002828:	4b65      	ldr	r3, [pc, #404]	@ (80029c0 <HAL_RCC_ClockConfig+0x220>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d001      	beq.n	800283a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e133      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d049      	beq.n	80028da <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002852:	4b5c      	ldr	r3, [pc, #368]	@ (80029c4 <HAL_RCC_ClockConfig+0x224>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4a5b      	ldr	r2, [pc, #364]	@ (80029c4 <HAL_RCC_ClockConfig+0x224>)
 8002858:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800285c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800286a:	4b56      	ldr	r3, [pc, #344]	@ (80029c4 <HAL_RCC_ClockConfig+0x224>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4a55      	ldr	r2, [pc, #340]	@ (80029c4 <HAL_RCC_ClockConfig+0x224>)
 8002870:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002874:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d024      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x128>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b80      	cmp	r3, #128	@ 0x80
 8002884:	d020      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x128>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b90      	cmp	r3, #144	@ 0x90
 800288c:	d01c      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x128>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2ba0      	cmp	r3, #160	@ 0xa0
 8002894:	d018      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x128>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2bb0      	cmp	r3, #176	@ 0xb0
 800289c:	d014      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x128>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80028a4:	d010      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x128>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2bd0      	cmp	r3, #208	@ 0xd0
 80028ac:	d00c      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x128>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2be0      	cmp	r3, #224	@ 0xe0
 80028b4:	d008      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x128>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2bf0      	cmp	r3, #240	@ 0xf0
 80028bc:	d004      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x128>
 80028be:	f240 315d 	movw	r1, #861	@ 0x35d
 80028c2:	483e      	ldr	r0, [pc, #248]	@ (80029bc <HAL_RCC_ClockConfig+0x21c>)
 80028c4:	f7fe fd7a 	bl	80013bc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c8:	4b3e      	ldr	r3, [pc, #248]	@ (80029c4 <HAL_RCC_ClockConfig+0x224>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	493b      	ldr	r1, [pc, #236]	@ (80029c4 <HAL_RCC_ClockConfig+0x224>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d051      	beq.n	800298a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00c      	beq.n	8002908 <HAL_RCC_ClockConfig+0x168>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d008      	beq.n	8002908 <HAL_RCC_ClockConfig+0x168>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d004      	beq.n	8002908 <HAL_RCC_ClockConfig+0x168>
 80028fe:	f44f 7159 	mov.w	r1, #868	@ 0x364
 8002902:	482e      	ldr	r0, [pc, #184]	@ (80029bc <HAL_RCC_ClockConfig+0x21c>)
 8002904:	f7fe fd5a 	bl	80013bc <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d107      	bne.n	8002920 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002910:	4b2c      	ldr	r3, [pc, #176]	@ (80029c4 <HAL_RCC_ClockConfig+0x224>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d115      	bne.n	8002948 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0c0      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d107      	bne.n	8002938 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002928:	4b26      	ldr	r3, [pc, #152]	@ (80029c4 <HAL_RCC_ClockConfig+0x224>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0b4      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	4b22      	ldr	r3, [pc, #136]	@ (80029c4 <HAL_RCC_ClockConfig+0x224>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0ac      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002948:	4b1e      	ldr	r3, [pc, #120]	@ (80029c4 <HAL_RCC_ClockConfig+0x224>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f023 0203 	bic.w	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	491b      	ldr	r1, [pc, #108]	@ (80029c4 <HAL_RCC_ClockConfig+0x224>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800295a:	f7fe ff61 	bl	8001820 <HAL_GetTick>
 800295e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002960:	e00a      	b.n	8002978 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002962:	f7fe ff5d 	bl	8001820 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e094      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002978:	4b12      	ldr	r3, [pc, #72]	@ (80029c4 <HAL_RCC_ClockConfig+0x224>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 020c 	and.w	r2, r3, #12
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	429a      	cmp	r2, r3
 8002988:	d1eb      	bne.n	8002962 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800298a:	4b0d      	ldr	r3, [pc, #52]	@ (80029c0 <HAL_RCC_ClockConfig+0x220>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d217      	bcs.n	80029c8 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002998:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <HAL_RCC_ClockConfig+0x220>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 0207 	bic.w	r2, r3, #7
 80029a0:	4907      	ldr	r1, [pc, #28]	@ (80029c0 <HAL_RCC_ClockConfig+0x220>)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_RCC_ClockConfig+0x220>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d008      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e073      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x302>
 80029ba:	bf00      	nop
 80029bc:	08004cb4 	.word	0x08004cb4
 80029c0:	40022000 	.word	0x40022000
 80029c4:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d025      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d018      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x26e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029e4:	d013      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x26e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80029ee:	d00e      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x26e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80029f8:	d009      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x26e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a02:	d004      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x26e>
 8002a04:	f240 31a2 	movw	r1, #930	@ 0x3a2
 8002a08:	4828      	ldr	r0, [pc, #160]	@ (8002aac <HAL_RCC_ClockConfig+0x30c>)
 8002a0a:	f7fe fcd7 	bl	80013bc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a0e:	4b28      	ldr	r3, [pc, #160]	@ (8002ab0 <HAL_RCC_ClockConfig+0x310>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	4925      	ldr	r1, [pc, #148]	@ (8002ab0 <HAL_RCC_ClockConfig+0x310>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d026      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d018      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x2c6>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3c:	d013      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x2c6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002a46:	d00e      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x2c6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002a50:	d009      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x2c6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a5a:	d004      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x2c6>
 8002a5c:	f240 31a9 	movw	r1, #937	@ 0x3a9
 8002a60:	4812      	ldr	r0, [pc, #72]	@ (8002aac <HAL_RCC_ClockConfig+0x30c>)
 8002a62:	f7fe fcab 	bl	80013bc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a66:	4b12      	ldr	r3, [pc, #72]	@ (8002ab0 <HAL_RCC_ClockConfig+0x310>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	490e      	ldr	r1, [pc, #56]	@ (8002ab0 <HAL_RCC_ClockConfig+0x310>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a7a:	f000 f821 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <HAL_RCC_ClockConfig+0x310>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	490a      	ldr	r1, [pc, #40]	@ (8002ab4 <HAL_RCC_ClockConfig+0x314>)
 8002a8c:	5ccb      	ldrb	r3, [r1, r3]
 8002a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a92:	4a09      	ldr	r2, [pc, #36]	@ (8002ab8 <HAL_RCC_ClockConfig+0x318>)
 8002a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a96:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <HAL_RCC_ClockConfig+0x31c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fe7e 	bl	800179c <HAL_InitTick>

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	08004cb4 	.word	0x08004cb4
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08004dd4 	.word	0x08004dd4
 8002ab8:	20000020 	.word	0x20000020
 8002abc:	20000024 	.word	0x20000024

08002ac0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ada:	4b1e      	ldr	r3, [pc, #120]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d002      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d003      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0x36>
 8002aee:	e027      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002af0:	4b19      	ldr	r3, [pc, #100]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002af2:	613b      	str	r3, [r7, #16]
      break;
 8002af4:	e027      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	0c9b      	lsrs	r3, r3, #18
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	4a17      	ldr	r2, [pc, #92]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d010      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b0e:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	0c5b      	lsrs	r3, r3, #17
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	4a11      	ldr	r2, [pc, #68]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b1a:	5cd3      	ldrb	r3, [r2, r3]
 8002b1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a0d      	ldr	r2, [pc, #52]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b22:	fb03 f202 	mul.w	r2, r3, r2
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e004      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a0c      	ldr	r2, [pc, #48]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b34:	fb02 f303 	mul.w	r3, r2, r3
 8002b38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	613b      	str	r3, [r7, #16]
      break;
 8002b3e:	e002      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b42:	613b      	str	r3, [r7, #16]
      break;
 8002b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b46:	693b      	ldr	r3, [r7, #16]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	371c      	adds	r7, #28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	007a1200 	.word	0x007a1200
 8002b5c:	08004dec 	.word	0x08004dec
 8002b60:	08004dfc 	.word	0x08004dfc
 8002b64:	003d0900 	.word	0x003d0900

08002b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b6c:	4b02      	ldr	r3, [pc, #8]	@ (8002b78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	20000020 	.word	0x20000020

08002b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b80:	f7ff fff2 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b05      	ldr	r3, [pc, #20]	@ (8002b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	0adb      	lsrs	r3, r3, #11
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	4903      	ldr	r1, [pc, #12]	@ (8002ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	08004de4 	.word	0x08004de4

08002ba4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bac:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <RCC_Delay+0x34>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bdc <RCC_Delay+0x38>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	0a5b      	lsrs	r3, r3, #9
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bc0:	bf00      	nop
  }
  while (Delay --);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1e5a      	subs	r2, r3, #1
 8002bc6:	60fa      	str	r2, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f9      	bne.n	8002bc0 <RCC_Delay+0x1c>
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	20000020 	.word	0x20000020
 8002bdc:	10624dd3 	.word	0x10624dd3

08002be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10f      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d103      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002c14:	216a      	movs	r1, #106	@ 0x6a
 8002c16:	4873      	ldr	r0, [pc, #460]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002c18:	f7fe fbd0 	bl	80013bc <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 8095 	beq.w	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d012      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c3e:	d00d      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c48:	d008      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c52:	d003      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c54:	2172      	movs	r1, #114	@ 0x72
 8002c56:	4863      	ldr	r0, [pc, #396]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002c58:	f7fe fbb0 	bl	80013bc <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5c:	4b62      	ldr	r3, [pc, #392]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10d      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c68:	4b5f      	ldr	r3, [pc, #380]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	4a5e      	ldr	r2, [pc, #376]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c72:	61d3      	str	r3, [r2, #28]
 8002c74:	4b5c      	ldr	r3, [pc, #368]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c80:	2301      	movs	r3, #1
 8002c82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b59      	ldr	r3, [pc, #356]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d118      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c90:	4b56      	ldr	r3, [pc, #344]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a55      	ldr	r2, [pc, #340]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9c:	f7fe fdc0 	bl	8001820 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca4:	f7fe fdbc 	bl	8001820 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	@ 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e092      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb6:	4b4d      	ldr	r3, [pc, #308]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cc2:	4b49      	ldr	r3, [pc, #292]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d02e      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d027      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ce0:	4b41      	ldr	r3, [pc, #260]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ce8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cea:	4b41      	ldr	r3, [pc, #260]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d014      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d06:	f7fe fd8b 	bl	8001820 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fe fd87 	bl	8001820 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e05b      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d24:	4b30      	ldr	r3, [pc, #192]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0ee      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d30:	4b2d      	ldr	r3, [pc, #180]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	492a      	ldr	r1, [pc, #168]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d42:	7dfb      	ldrb	r3, [r7, #23]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d105      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d48:	4b27      	ldr	r3, [pc, #156]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	4a26      	ldr	r2, [pc, #152]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01f      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d012      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d70:	d00d      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d7a:	d008      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002d84:	d003      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002d86:	21b7      	movs	r1, #183	@ 0xb7
 8002d88:	4816      	ldr	r0, [pc, #88]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002d8a:	f7fe fb17 	bl	80013bc <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d8e:	4b16      	ldr	r3, [pc, #88]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	4913      	ldr	r1, [pc, #76]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d016      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002db4:	d008      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002dbe:	f240 1113 	movw	r1, #275	@ 0x113
 8002dc2:	4808      	ldr	r0, [pc, #32]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002dc4:	f7fe fafa 	bl	80013bc <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dc8:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4904      	ldr	r1, [pc, #16]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	08004cec 	.word	0x08004cec
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40007000 	.word	0x40007000
 8002df0:	42420440 	.word	0x42420440

08002df4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10e      	bne.n	8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d104      	bne.n	8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8002e2e:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8002e32:	484f      	ldr	r0, [pc, #316]	@ (8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002e34:	f7fe fac2 	bl	80013bc <assert_failed>

  switch (PeriphClk)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b10      	cmp	r3, #16
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b10      	cmp	r3, #16
 8002e42:	f200 808a 	bhi.w	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d045      	beq.n	8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d075      	beq.n	8002f3e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e52:	e082      	b.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      temp_reg = RCC->CFGR;
 8002e54:	4b47      	ldr	r3, [pc, #284]	@ (8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e5a:	4b46      	ldr	r3, [pc, #280]	@ (8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d07b      	beq.n	8002f5e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	0c9b      	lsrs	r3, r3, #18
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	4a42      	ldr	r2, [pc, #264]	@ (8002f78 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8002e70:	5cd3      	ldrb	r3, [r2, r3]
 8002e72:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d015      	beq.n	8002eaa <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	0c5b      	lsrs	r3, r3, #17
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	4a3c      	ldr	r2, [pc, #240]	@ (8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x188>)
 8002e8a:	5cd3      	ldrb	r3, [r2, r3]
 8002e8c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00d      	beq.n	8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e98:	4a39      	ldr	r2, [pc, #228]	@ (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	fb02 f303 	mul.w	r3, r2, r3
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	e004      	b.n	8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4a35      	ldr	r2, [pc, #212]	@ (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x190>)
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ebc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ec0:	d102      	bne.n	8002ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          frequency = pllclk;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	61bb      	str	r3, [r7, #24]
      break;
 8002ec6:	e04a      	b.n	8002f5e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = (pllclk * 2) / 3;
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8002f88 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	085b      	lsrs	r3, r3, #1
 8002ed4:	61bb      	str	r3, [r7, #24]
      break;
 8002ed6:	e042      	b.n	8002f5e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
      temp_reg = RCC->BDCR;
 8002ed8:	4b26      	ldr	r3, [pc, #152]	@ (8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ee8:	d108      	bne.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        frequency = LSE_VALUE;
 8002ef4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	e01f      	b.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f06:	d109      	bne.n	8002f1c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8002f08:	4b1a      	ldr	r3, [pc, #104]	@ (8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
        frequency = LSI_VALUE;
 8002f14:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	e00f      	b.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f26:	d11c      	bne.n	8002f62 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8002f28:	4b12      	ldr	r3, [pc, #72]	@ (8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d016      	beq.n	8002f62 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = HSE_VALUE / 128U;
 8002f34:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002f38:	61bb      	str	r3, [r7, #24]
      break;
 8002f3a:	e012      	b.n	8002f62 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8002f3c:	e011      	b.n	8002f62 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f3e:	f7ff fe1d 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4b0b      	ldr	r3, [pc, #44]	@ (8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	0b9b      	lsrs	r3, r3, #14
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	61bb      	str	r3, [r7, #24]
      break;
 8002f58:	e004      	b.n	8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e002      	b.n	8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e000      	b.n	8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      break;
 8002f62:	bf00      	nop
    }
  }
  return (frequency);
 8002f64:	69bb      	ldr	r3, [r7, #24]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	08004cec 	.word	0x08004cec
 8002f74:	40021000 	.word	0x40021000
 8002f78:	08004e00 	.word	0x08004e00
 8002f7c:	08004e10 	.word	0x08004e10
 8002f80:	007a1200 	.word	0x007a1200
 8002f84:	003d0900 	.word	0x003d0900
 8002f88:	aaaaaaab 	.word	0xaaaaaaab

08002f8c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e0aa      	b.n	80030f8 <HAL_RTC_Init+0x16c>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a56      	ldr	r2, [pc, #344]	@ (8003100 <HAL_RTC_Init+0x174>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d004      	beq.n	8002fb6 <HAL_RTC_Init+0x2a>
 8002fac:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8002fb0:	4854      	ldr	r0, [pc, #336]	@ (8003104 <HAL_RTC_Init+0x178>)
 8002fb2:	f7fe fa03 	bl	80013bc <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d012      	beq.n	8002fe4 <HAL_RTC_Init+0x58>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b80      	cmp	r3, #128	@ 0x80
 8002fc4:	d00e      	beq.n	8002fe4 <HAL_RTC_Init+0x58>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fce:	d009      	beq.n	8002fe4 <HAL_RTC_Init+0x58>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fd8:	d004      	beq.n	8002fe4 <HAL_RTC_Init+0x58>
 8002fda:	f240 111f 	movw	r1, #287	@ 0x11f
 8002fde:	4849      	ldr	r0, [pc, #292]	@ (8003104 <HAL_RTC_Init+0x178>)
 8002fe0:	f7fe f9ec 	bl	80013bc <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fec:	d309      	bcc.n	8003002 <HAL_RTC_Init+0x76>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d004      	beq.n	8003002 <HAL_RTC_Init+0x76>
 8002ff8:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002ffc:	4841      	ldr	r0, [pc, #260]	@ (8003104 <HAL_RTC_Init+0x178>)
 8002ffe:	f7fe f9dd 	bl	80013bc <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	7c5b      	ldrb	r3, [r3, #17]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe fa10 	bl	8001438 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fbc0 	bl	80037a4 <HAL_RTC_WaitForSynchro>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d004      	beq.n	8003034 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2204      	movs	r2, #4
 800302e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e061      	b.n	80030f8 <HAL_RTC_Init+0x16c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fc79 	bl	800392c <RTC_EnterInitMode>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d004      	beq.n	800304a <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2204      	movs	r2, #4
 8003044:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e056      	b.n	80030f8 <HAL_RTC_Init+0x16c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0207 	bic.w	r2, r2, #7
 8003058:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003062:	4b29      	ldr	r3, [pc, #164]	@ (8003108 <HAL_RTC_Init+0x17c>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	4a28      	ldr	r2, [pc, #160]	@ (8003108 <HAL_RTC_Init+0x17c>)
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800306e:	4b26      	ldr	r3, [pc, #152]	@ (8003108 <HAL_RTC_Init+0x17c>)
 8003070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003072:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	4923      	ldr	r1, [pc, #140]	@ (8003108 <HAL_RTC_Init+0x17c>)
 800307c:	4313      	orrs	r3, r2
 800307e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d003      	beq.n	8003092 <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e00e      	b.n	80030b0 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003092:	2001      	movs	r0, #1
 8003094:	f7ff feae 	bl	8002df4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003098:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d104      	bne.n	80030aa <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2204      	movs	r2, #4
 80030a4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e026      	b.n	80030f8 <HAL_RTC_Init+0x16c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	0c1a      	lsrs	r2, r3, #16
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f002 020f 	and.w	r2, r2, #15
 80030bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	b292      	uxth	r2, r2
 80030c6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fc57 	bl	800397c <RTC_ExitInitMode>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d004      	beq.n	80030de <HAL_RTC_Init+0x152>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2204      	movs	r2, #4
 80030d8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e00c      	b.n	80030f8 <HAL_RTC_Init+0x16c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80030f6:	2300      	movs	r3, #0
  }
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40002800 	.word	0x40002800
 8003104:	08004d28 	.word	0x08004d28
 8003108:	40006c00 	.word	0x40006c00

0800310c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800310c:	b590      	push	{r4, r7, lr}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_RTC_SetTime+0x20>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0cd      	b.n	80032cc <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <HAL_RTC_SetTime+0x3a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d004      	beq.n	8003146 <HAL_RTC_SetTime+0x3a>
 800313c:	f240 21cb 	movw	r1, #715	@ 0x2cb
 8003140:	4864      	ldr	r0, [pc, #400]	@ (80032d4 <HAL_RTC_SetTime+0x1c8>)
 8003142:	f7fe f93b 	bl	80013bc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	7c1b      	ldrb	r3, [r3, #16]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_RTC_SetTime+0x46>
 800314e:	2302      	movs	r3, #2
 8003150:	e0bc      	b.n	80032cc <HAL_RTC_SetTime+0x1c0>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2202      	movs	r2, #2
 800315c:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d12e      	bne.n	80031c2 <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b17      	cmp	r3, #23
 800316a:	d904      	bls.n	8003176 <HAL_RTC_SetTime+0x6a>
 800316c:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 8003170:	4858      	ldr	r0, [pc, #352]	@ (80032d4 <HAL_RTC_SetTime+0x1c8>)
 8003172:	f7fe f923 	bl	80013bc <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	785b      	ldrb	r3, [r3, #1]
 800317a:	2b3b      	cmp	r3, #59	@ 0x3b
 800317c:	d904      	bls.n	8003188 <HAL_RTC_SetTime+0x7c>
 800317e:	f240 21d5 	movw	r1, #725	@ 0x2d5
 8003182:	4854      	ldr	r0, [pc, #336]	@ (80032d4 <HAL_RTC_SetTime+0x1c8>)
 8003184:	f7fe f91a 	bl	80013bc <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	789b      	ldrb	r3, [r3, #2]
 800318c:	2b3b      	cmp	r3, #59	@ 0x3b
 800318e:	d904      	bls.n	800319a <HAL_RTC_SetTime+0x8e>
 8003190:	f240 21d6 	movw	r1, #726	@ 0x2d6
 8003194:	484f      	ldr	r0, [pc, #316]	@ (80032d4 <HAL_RTC_SetTime+0x1c8>)
 8003196:	f7fe f911 	bl	80013bc <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80031a4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	4619      	mov	r1, r3
 80031ae:	460b      	mov	r3, r1
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a5b      	subs	r3, r3, r1
 80031b4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80031b6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80031bc:	4413      	add	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	e045      	b.n	800324e <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fc1d 	bl	8003a06 <RTC_Bcd2ToByte>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b17      	cmp	r3, #23
 80031d0:	d904      	bls.n	80031dc <HAL_RTC_SetTime+0xd0>
 80031d2:	f240 21de 	movw	r1, #734	@ 0x2de
 80031d6:	483f      	ldr	r0, [pc, #252]	@ (80032d4 <HAL_RTC_SetTime+0x1c8>)
 80031d8:	f7fe f8f0 	bl	80013bc <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	785b      	ldrb	r3, [r3, #1]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fc10 	bl	8003a06 <RTC_Bcd2ToByte>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80031ea:	d904      	bls.n	80031f6 <HAL_RTC_SetTime+0xea>
 80031ec:	f240 21df 	movw	r1, #735	@ 0x2df
 80031f0:	4838      	ldr	r0, [pc, #224]	@ (80032d4 <HAL_RTC_SetTime+0x1c8>)
 80031f2:	f7fe f8e3 	bl	80013bc <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	789b      	ldrb	r3, [r3, #2]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fc03 	bl	8003a06 <RTC_Bcd2ToByte>
 8003200:	4603      	mov	r3, r0
 8003202:	2b3b      	cmp	r3, #59	@ 0x3b
 8003204:	d904      	bls.n	8003210 <HAL_RTC_SetTime+0x104>
 8003206:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 800320a:	4832      	ldr	r0, [pc, #200]	@ (80032d4 <HAL_RTC_SetTime+0x1c8>)
 800320c:	f7fe f8d6 	bl	80013bc <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fbf6 	bl	8003a06 <RTC_Bcd2ToByte>
 800321a:	4603      	mov	r3, r0
 800321c:	461a      	mov	r2, r3
 800321e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003222:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	785b      	ldrb	r3, [r3, #1]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fbeb 	bl	8003a06 <RTC_Bcd2ToByte>
 8003230:	4603      	mov	r3, r0
 8003232:	461a      	mov	r2, r3
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800323c:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	789b      	ldrb	r3, [r3, #2]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fbdf 	bl	8003a06 <RTC_Bcd2ToByte>
 8003248:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800324a:	4423      	add	r3, r4
 800324c:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800324e:	6979      	ldr	r1, [r7, #20]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fb04 	bl	800385e <RTC_WriteTimeCounter>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d007      	beq.n	800326c <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2204      	movs	r2, #4
 8003260:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e02f      	b.n	80032cc <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0205 	bic.w	r2, r2, #5
 800327a:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 fb15 	bl	80038ac <RTC_ReadAlarmCounter>
 8003282:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328a:	d018      	beq.n	80032be <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	429a      	cmp	r2, r3
 8003292:	d214      	bcs.n	80032be <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800329a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800329e:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80032a0:	6939      	ldr	r1, [r7, #16]
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fb1b 	bl	80038de <RTC_WriteAlarmCounter>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2204      	movs	r2, #4
 80032b2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e006      	b.n	80032cc <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80032ca:	2300      	movs	r3, #0
  }
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	371c      	adds	r7, #28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd90      	pop	{r4, r7, pc}
 80032d4:	08004d28 	.word	0x08004d28

080032d8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61bb      	str	r3, [r7, #24]
 80032e8:	2300      	movs	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	2300      	movs	r3, #0
 80032f2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_RTC_GetTime+0x28>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0c0      	b.n	8003486 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <HAL_RTC_GetTime+0x42>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d004      	beq.n	800331a <HAL_RTC_GetTime+0x42>
 8003310:	f240 312e 	movw	r1, #814	@ 0x32e
 8003314:	485e      	ldr	r0, [pc, #376]	@ (8003490 <HAL_RTC_GetTime+0x1b8>)
 8003316:	f7fe f851 	bl	80013bc <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0ac      	b.n	8003486 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 fa66 	bl	80037fe <RTC_ReadTimeCounter>
 8003332:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	4a57      	ldr	r2, [pc, #348]	@ (8003494 <HAL_RTC_GetTime+0x1bc>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	0adb      	lsrs	r3, r3, #11
 800333e:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4b54      	ldr	r3, [pc, #336]	@ (8003494 <HAL_RTC_GetTime+0x1bc>)
 8003344:	fba3 1302 	umull	r1, r3, r3, r2
 8003348:	0adb      	lsrs	r3, r3, #11
 800334a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	4a50      	ldr	r2, [pc, #320]	@ (8003498 <HAL_RTC_GetTime+0x1c0>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	b2da      	uxtb	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	4a4b      	ldr	r2, [pc, #300]	@ (8003494 <HAL_RTC_GetTime+0x1bc>)
 8003366:	fba2 1203 	umull	r1, r2, r2, r3
 800336a:	0ad2      	lsrs	r2, r2, #11
 800336c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003370:	fb01 f202 	mul.w	r2, r1, r2
 8003374:	1a9a      	subs	r2, r3, r2
 8003376:	4b48      	ldr	r3, [pc, #288]	@ (8003498 <HAL_RTC_GetTime+0x1c0>)
 8003378:	fba3 1302 	umull	r1, r3, r3, r2
 800337c:	0959      	lsrs	r1, r3, #5
 800337e:	460b      	mov	r3, r1
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a5b      	subs	r3, r3, r1
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	1ad1      	subs	r1, r2, r3
 8003388:	b2ca      	uxtb	r2, r1
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b17      	cmp	r3, #23
 8003392:	d955      	bls.n	8003440 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4a41      	ldr	r2, [pc, #260]	@ (800349c <HAL_RTC_GetTime+0x1c4>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80033a0:	6939      	ldr	r1, [r7, #16]
 80033a2:	4b3e      	ldr	r3, [pc, #248]	@ (800349c <HAL_RTC_GetTime+0x1c4>)
 80033a4:	fba3 2301 	umull	r2, r3, r3, r1
 80033a8:	091a      	lsrs	r2, r3, #4
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	1aca      	subs	r2, r1, r3
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 fa76 	bl	80038ac <RTC_ReadAlarmCounter>
 80033c0:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d008      	beq.n	80033dc <HAL_RTC_GetTime+0x104>
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d904      	bls.n	80033dc <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	e002      	b.n	80033e2 <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80033dc:	f04f 33ff 	mov.w	r3, #4294967295
 80033e0:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	4a2e      	ldr	r2, [pc, #184]	@ (80034a0 <HAL_RTC_GetTime+0x1c8>)
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80033f0:	69b9      	ldr	r1, [r7, #24]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fa33 	bl	800385e <RTC_WriteTimeCounter>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e041      	b.n	8003486 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d00c      	beq.n	8003424 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	4413      	add	r3, r2
 8003410:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003412:	69f9      	ldr	r1, [r7, #28]
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fa62 	bl	80038de <RTC_WriteAlarmCounter>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e030      	b.n	8003486 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003424:	69f9      	ldr	r1, [r7, #28]
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fa59 	bl	80038de <RTC_WriteAlarmCounter>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e027      	b.n	8003486 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003436:	6979      	ldr	r1, [r7, #20]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fb01 	bl	8003a40 <RTC_DateUpdate>
 800343e:	e003      	b.n	8003448 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01a      	beq.n	8003484 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 faba 	bl	80039cc <RTC_ByteToBcd2>
 8003458:	4603      	mov	r3, r0
 800345a:	461a      	mov	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	785b      	ldrb	r3, [r3, #1]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fab1 	bl	80039cc <RTC_ByteToBcd2>
 800346a:	4603      	mov	r3, r0
 800346c:	461a      	mov	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	789b      	ldrb	r3, [r3, #2]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 faa8 	bl	80039cc <RTC_ByteToBcd2>
 800347c:	4603      	mov	r3, r0
 800347e:	461a      	mov	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	08004d28 	.word	0x08004d28
 8003494:	91a2b3c5 	.word	0x91a2b3c5
 8003498:	88888889 	.word	0x88888889
 800349c:	aaaaaaab 	.word	0xaaaaaaab
 80034a0:	00015180 	.word	0x00015180

080034a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61fb      	str	r3, [r7, #28]
 80034b4:	2300      	movs	r3, #0
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_RTC_SetDate+0x24>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0fc      	b.n	80036c6 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <HAL_RTC_SetDate+0x3e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d004      	beq.n	80034e2 <HAL_RTC_SetDate+0x3e>
 80034d8:	f240 319d 	movw	r1, #925	@ 0x39d
 80034dc:	487c      	ldr	r0, [pc, #496]	@ (80036d0 <HAL_RTC_SetDate+0x22c>)
 80034de:	f7fd ff6d 	bl	80013bc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	7c1b      	ldrb	r3, [r3, #16]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_RTC_SetDate+0x4a>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e0eb      	b.n	80036c6 <HAL_RTC_SetDate+0x222>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2202      	movs	r2, #2
 80034f8:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d12f      	bne.n	8003560 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	78db      	ldrb	r3, [r3, #3]
 8003504:	2b63      	cmp	r3, #99	@ 0x63
 8003506:	d904      	bls.n	8003512 <HAL_RTC_SetDate+0x6e>
 8003508:	f240 31a6 	movw	r1, #934	@ 0x3a6
 800350c:	4870      	ldr	r0, [pc, #448]	@ (80036d0 <HAL_RTC_SetDate+0x22c>)
 800350e:	f7fd ff55 	bl	80013bc <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	785b      	ldrb	r3, [r3, #1]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_RTC_SetDate+0x7e>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	785b      	ldrb	r3, [r3, #1]
 800351e:	2b0c      	cmp	r3, #12
 8003520:	d904      	bls.n	800352c <HAL_RTC_SetDate+0x88>
 8003522:	f240 31a7 	movw	r1, #935	@ 0x3a7
 8003526:	486a      	ldr	r0, [pc, #424]	@ (80036d0 <HAL_RTC_SetDate+0x22c>)
 8003528:	f7fd ff48 	bl	80013bc <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	789b      	ldrb	r3, [r3, #2]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_RTC_SetDate+0x98>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	789b      	ldrb	r3, [r3, #2]
 8003538:	2b1f      	cmp	r3, #31
 800353a:	d904      	bls.n	8003546 <HAL_RTC_SetDate+0xa2>
 800353c:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
 8003540:	4863      	ldr	r0, [pc, #396]	@ (80036d0 <HAL_RTC_SetDate+0x22c>)
 8003542:	f7fd ff3b 	bl	80013bc <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	78da      	ldrb	r2, [r3, #3]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	785a      	ldrb	r2, [r3, #1]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	789a      	ldrb	r2, [r3, #2]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	739a      	strb	r2, [r3, #14]
 800355e:	e051      	b.n	8003604 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	78db      	ldrb	r3, [r3, #3]
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fa4e 	bl	8003a06 <RTC_Bcd2ToByte>
 800356a:	4603      	mov	r3, r0
 800356c:	2b63      	cmp	r3, #99	@ 0x63
 800356e:	d904      	bls.n	800357a <HAL_RTC_SetDate+0xd6>
 8003570:	f240 31b1 	movw	r1, #945	@ 0x3b1
 8003574:	4856      	ldr	r0, [pc, #344]	@ (80036d0 <HAL_RTC_SetDate+0x22c>)
 8003576:	f7fd ff21 	bl	80013bc <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	785b      	ldrb	r3, [r3, #1]
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fa41 	bl	8003a06 <RTC_Bcd2ToByte>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <HAL_RTC_SetDate+0xf6>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	785b      	ldrb	r3, [r3, #1]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fa39 	bl	8003a06 <RTC_Bcd2ToByte>
 8003594:	4603      	mov	r3, r0
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d904      	bls.n	80035a4 <HAL_RTC_SetDate+0x100>
 800359a:	f240 31b2 	movw	r1, #946	@ 0x3b2
 800359e:	484c      	ldr	r0, [pc, #304]	@ (80036d0 <HAL_RTC_SetDate+0x22c>)
 80035a0:	f7fd ff0c 	bl	80013bc <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	789b      	ldrb	r3, [r3, #2]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fa2c 	bl	8003a06 <RTC_Bcd2ToByte>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <HAL_RTC_SetDate+0x120>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	789b      	ldrb	r3, [r3, #2]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fa24 	bl	8003a06 <RTC_Bcd2ToByte>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b1f      	cmp	r3, #31
 80035c2:	d904      	bls.n	80035ce <HAL_RTC_SetDate+0x12a>
 80035c4:	f240 31b3 	movw	r1, #947	@ 0x3b3
 80035c8:	4841      	ldr	r0, [pc, #260]	@ (80036d0 <HAL_RTC_SetDate+0x22c>)
 80035ca:	f7fd fef7 	bl	80013bc <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	78db      	ldrb	r3, [r3, #3]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fa17 	bl	8003a06 <RTC_Bcd2ToByte>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	785b      	ldrb	r3, [r3, #1]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fa0e 	bl	8003a06 <RTC_Bcd2ToByte>
 80035ea:	4603      	mov	r3, r0
 80035ec:	461a      	mov	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	789b      	ldrb	r3, [r3, #2]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fa05 	bl	8003a06 <RTC_Bcd2ToByte>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	7bdb      	ldrb	r3, [r3, #15]
 8003608:	4618      	mov	r0, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	7b59      	ldrb	r1, [r3, #13]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	7b9b      	ldrb	r3, [r3, #14]
 8003612:	461a      	mov	r2, r3
 8003614:	f000 faf0 	bl	8003bf8 <RTC_WeekDayNum>
 8003618:	4603      	mov	r3, r0
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	7b1a      	ldrb	r2, [r3, #12]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f8e8 	bl	80037fe <RTC_ReadTimeCounter>
 800362e:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	4a28      	ldr	r2, [pc, #160]	@ (80036d4 <HAL_RTC_SetDate+0x230>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	0adb      	lsrs	r3, r3, #11
 800363a:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2b18      	cmp	r3, #24
 8003640:	d93a      	bls.n	80036b8 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	4a24      	ldr	r2, [pc, #144]	@ (80036d8 <HAL_RTC_SetDate+0x234>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	4a23      	ldr	r2, [pc, #140]	@ (80036dc <HAL_RTC_SetDate+0x238>)
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003658:	69f9      	ldr	r1, [r7, #28]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f8ff 	bl	800385e <RTC_WriteTimeCounter>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2204      	movs	r2, #4
 800366a:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e027      	b.n	80036c6 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f918 	bl	80038ac <RTC_ReadAlarmCounter>
 800367c:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003684:	d018      	beq.n	80036b8 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	429a      	cmp	r2, r3
 800368c:	d214      	bcs.n	80036b8 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003694:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003698:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800369a:	69b9      	ldr	r1, [r7, #24]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f91e 	bl	80038de <RTC_WriteAlarmCounter>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2204      	movs	r2, #4
 80036ac:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e006      	b.n	80036c6 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	08004d28 	.word	0x08004d28
 80036d4:	91a2b3c5 	.word	0x91a2b3c5
 80036d8:	aaaaaaab 	.word	0xaaaaaaab
 80036dc:	00015180 	.word	0x00015180

080036e0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	2100      	movs	r1, #0
 80036f2:	460a      	mov	r2, r1
 80036f4:	801a      	strh	r2, [r3, #0]
 80036f6:	460a      	mov	r2, r1
 80036f8:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_RTC_GetDate+0x26>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e045      	b.n	8003796 <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <HAL_RTC_GetDate+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d004      	beq.n	8003720 <HAL_RTC_GetDate+0x40>
 8003716:	f240 410f 	movw	r1, #1039	@ 0x40f
 800371a:	4821      	ldr	r0, [pc, #132]	@ (80037a0 <HAL_RTC_GetDate+0xc0>)
 800371c:	f7fd fe4e 	bl	80013bc <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	2200      	movs	r2, #0
 8003726:	4619      	mov	r1, r3
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff fdd5 	bl	80032d8 <HAL_RTC_GetTime>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e02e      	b.n	8003796 <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	7b1a      	ldrb	r2, [r3, #12]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	7bda      	ldrb	r2, [r3, #15]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	7b5a      	ldrb	r2, [r3, #13]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	7b9a      	ldrb	r2, [r3, #14]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d01a      	beq.n	8003794 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	78db      	ldrb	r3, [r3, #3]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f932 	bl	80039cc <RTC_ByteToBcd2>
 8003768:	4603      	mov	r3, r0
 800376a:	461a      	mov	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	785b      	ldrb	r3, [r3, #1]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 f929 	bl	80039cc <RTC_ByteToBcd2>
 800377a:	4603      	mov	r3, r0
 800377c:	461a      	mov	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	789b      	ldrb	r3, [r3, #2]
 8003786:	4618      	mov	r0, r3
 8003788:	f000 f920 	bl	80039cc <RTC_ByteToBcd2>
 800378c:	4603      	mov	r3, r0
 800378e:	461a      	mov	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	08004d28 	.word	0x08004d28

080037a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e01d      	b.n	80037f6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0208 	bic.w	r2, r2, #8
 80037c8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80037ca:	f7fe f829 	bl	8001820 <HAL_GetTick>
 80037ce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80037d0:	e009      	b.n	80037e6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80037d2:	f7fe f825 	bl	8001820 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037e0:	d901      	bls.n	80037e6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e007      	b.n	80037f6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0ee      	beq.n	80037d2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80037fe:	b480      	push	{r7}
 8003800:	b087      	sub	sp, #28
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	827b      	strh	r3, [r7, #18]
 800380a:	2300      	movs	r3, #0
 800380c:	823b      	strh	r3, [r7, #16]
 800380e:	2300      	movs	r3, #0
 8003810:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800382e:	8a7a      	ldrh	r2, [r7, #18]
 8003830:	8a3b      	ldrh	r3, [r7, #16]
 8003832:	429a      	cmp	r2, r3
 8003834:	d008      	beq.n	8003848 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003836:	8a3b      	ldrh	r3, [r7, #16]
 8003838:	041a      	lsls	r2, r3, #16
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	b29b      	uxth	r3, r3
 8003842:	4313      	orrs	r3, r2
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	e004      	b.n	8003852 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003848:	8a7b      	ldrh	r3, [r7, #18]
 800384a:	041a      	lsls	r2, r3, #16
 800384c:	89fb      	ldrh	r3, [r7, #14]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003852:	697b      	ldr	r3, [r7, #20]
}
 8003854:	4618      	mov	r0, r3
 8003856:	371c      	adds	r7, #28
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f85d 	bl	800392c <RTC_EnterInitMode>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
 800387c:	e011      	b.n	80038a2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	0c12      	lsrs	r2, r2, #16
 8003886:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	b292      	uxth	r2, r2
 8003890:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f872 	bl	800397c <RTC_ExitInitMode>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	81fb      	strh	r3, [r7, #14]
 80038b8:	2300      	movs	r3, #0
 80038ba:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80038cc:	89fb      	ldrh	r3, [r7, #14]
 80038ce:	041a      	lsls	r2, r3, #16
 80038d0:	89bb      	ldrh	r3, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f81d 	bl	800392c <RTC_EnterInitMode>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e011      	b.n	8003922 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	0c12      	lsrs	r2, r2, #16
 8003906:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	b292      	uxth	r2, r2
 8003910:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f832 	bl	800397c <RTC_ExitInitMode>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003922:	7bfb      	ldrb	r3, [r7, #15]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003938:	f7fd ff72 	bl	8001820 <HAL_GetTick>
 800393c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800393e:	e009      	b.n	8003954 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003940:	f7fd ff6e 	bl	8001820 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800394e:	d901      	bls.n	8003954 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e00f      	b.n	8003974 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0ee      	beq.n	8003940 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0210 	orr.w	r2, r2, #16
 8003970:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0210 	bic.w	r2, r2, #16
 8003996:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003998:	f7fd ff42 	bl	8001820 <HAL_GetTick>
 800399c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800399e:	e009      	b.n	80039b4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80039a0:	f7fd ff3e 	bl	8001820 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039ae:	d901      	bls.n	80039b4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e007      	b.n	80039c4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0ee      	beq.n	80039a0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80039da:	e005      	b.n	80039e8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3301      	adds	r3, #1
 80039e0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	3b0a      	subs	r3, #10
 80039e6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	2b09      	cmp	r3, #9
 80039ec:	d8f6      	bhi.n	80039dc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	b2db      	uxtb	r3, r3
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr

08003a06 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b085      	sub	sp, #20
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	4413      	add	r3, r2
 8003a34:	b2db      	uxtb	r3, r3
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	7bdb      	ldrb	r3, [r3, #15]
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	7b5b      	ldrb	r3, [r3, #13]
 8003a64:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	7b9b      	ldrb	r3, [r3, #14]
 8003a6a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	e06f      	b.n	8003b52 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d011      	beq.n	8003a9c <RTC_DateUpdate+0x5c>
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d00e      	beq.n	8003a9c <RTC_DateUpdate+0x5c>
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	d00b      	beq.n	8003a9c <RTC_DateUpdate+0x5c>
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b07      	cmp	r3, #7
 8003a88:	d008      	beq.n	8003a9c <RTC_DateUpdate+0x5c>
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d005      	beq.n	8003a9c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b0a      	cmp	r3, #10
 8003a94:	d002      	beq.n	8003a9c <RTC_DateUpdate+0x5c>
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b0c      	cmp	r3, #12
 8003a9a:	d117      	bne.n	8003acc <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b1e      	cmp	r3, #30
 8003aa0:	d803      	bhi.n	8003aaa <RTC_DateUpdate+0x6a>
      {
        day++;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003aa8:	e050      	b.n	8003b4c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	d005      	beq.n	8003abc <RTC_DateUpdate+0x7c>
        {
          month++;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003aba:	e047      	b.n	8003b4c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003abc:	2301      	movs	r3, #1
 8003abe:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	60fb      	str	r3, [r7, #12]
          year++;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003aca:	e03f      	b.n	8003b4c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d008      	beq.n	8003ae4 <RTC_DateUpdate+0xa4>
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b06      	cmp	r3, #6
 8003ad6:	d005      	beq.n	8003ae4 <RTC_DateUpdate+0xa4>
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	2b09      	cmp	r3, #9
 8003adc:	d002      	beq.n	8003ae4 <RTC_DateUpdate+0xa4>
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b0b      	cmp	r3, #11
 8003ae2:	d10c      	bne.n	8003afe <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b1d      	cmp	r3, #29
 8003ae8:	d803      	bhi.n	8003af2 <RTC_DateUpdate+0xb2>
      {
        day++;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3301      	adds	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003af0:	e02c      	b.n	8003b4c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	3301      	adds	r3, #1
 8003af6:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003af8:	2301      	movs	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003afc:	e026      	b.n	8003b4c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d123      	bne.n	8003b4c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b1b      	cmp	r3, #27
 8003b08:	d803      	bhi.n	8003b12 <RTC_DateUpdate+0xd2>
      {
        day++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e01c      	b.n	8003b4c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b1c      	cmp	r3, #28
 8003b16:	d111      	bne.n	8003b3c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 f839 	bl	8003b94 <RTC_IsLeapYear>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	e00d      	b.n	8003b4c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	3301      	adds	r3, #1
 8003b34:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003b36:	2301      	movs	r3, #1
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	e007      	b.n	8003b4c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b1d      	cmp	r3, #29
 8003b40:	d104      	bne.n	8003b4c <RTC_DateUpdate+0x10c>
      {
        month++;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	3301      	adds	r3, #1
 8003b46:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d38b      	bcc.n	8003a72 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6978      	ldr	r0, [r7, #20]
 8003b7e:	f000 f83b 	bl	8003bf8 <RTC_WeekDayNum>
 8003b82:	4603      	mov	r3, r0
 8003b84:	461a      	mov	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	731a      	strb	r2, [r3, #12]
}
 8003b8a:	bf00      	nop
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e01d      	b.n	8003bea <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	4a10      	ldr	r2, [pc, #64]	@ (8003bf4 <RTC_IsLeapYear+0x60>)
 8003bb2:	fba2 1203 	umull	r1, r2, r2, r3
 8003bb6:	0952      	lsrs	r2, r2, #5
 8003bb8:	2164      	movs	r1, #100	@ 0x64
 8003bba:	fb01 f202 	mul.w	r2, r1, r2
 8003bbe:	1a9b      	subs	r3, r3, r2
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e00f      	b.n	8003bea <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	4a09      	ldr	r2, [pc, #36]	@ (8003bf4 <RTC_IsLeapYear+0x60>)
 8003bce:	fba2 1203 	umull	r1, r2, r2, r3
 8003bd2:	09d2      	lsrs	r2, r2, #7
 8003bd4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003bd8:	fb01 f202 	mul.w	r2, r1, r2
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003be8:	2300      	movs	r3, #0
  }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	51eb851f 	.word	0x51eb851f

08003bf8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70fb      	strb	r3, [r7, #3]
 8003c04:	4613      	mov	r3, r2
 8003c06:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003c16:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d82d      	bhi.n	8003c7a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	4613      	mov	r3, r2
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	4413      	add	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003cdc <RTC_WeekDayNum+0xe4>)
 8003c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c30:	085a      	lsrs	r2, r3, #1
 8003c32:	78bb      	ldrb	r3, [r7, #2]
 8003c34:	441a      	add	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	441a      	add	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	441a      	add	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	4926      	ldr	r1, [pc, #152]	@ (8003ce0 <RTC_WeekDayNum+0xe8>)
 8003c48:	fba1 1303 	umull	r1, r3, r1, r3
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	1ad2      	subs	r2, r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	4922      	ldr	r1, [pc, #136]	@ (8003ce0 <RTC_WeekDayNum+0xe8>)
 8003c56:	fba1 1303 	umull	r1, r3, r1, r3
 8003c5a:	09db      	lsrs	r3, r3, #7
 8003c5c:	4413      	add	r3, r2
 8003c5e:	1d1a      	adds	r2, r3, #4
 8003c60:	4b20      	ldr	r3, [pc, #128]	@ (8003ce4 <RTC_WeekDayNum+0xec>)
 8003c62:	fba3 1302 	umull	r1, r3, r3, r2
 8003c66:	1ad1      	subs	r1, r2, r3
 8003c68:	0849      	lsrs	r1, r1, #1
 8003c6a:	440b      	add	r3, r1
 8003c6c:	0899      	lsrs	r1, r3, #2
 8003c6e:	460b      	mov	r3, r1
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	1a5b      	subs	r3, r3, r1
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e029      	b.n	8003cce <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	4413      	add	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	4a15      	ldr	r2, [pc, #84]	@ (8003cdc <RTC_WeekDayNum+0xe4>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	085a      	lsrs	r2, r3, #1
 8003c8e:	78bb      	ldrb	r3, [r7, #2]
 8003c90:	441a      	add	r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	441a      	add	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	089b      	lsrs	r3, r3, #2
 8003c9a:	441a      	add	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4910      	ldr	r1, [pc, #64]	@ (8003ce0 <RTC_WeekDayNum+0xe8>)
 8003ca0:	fba1 1303 	umull	r1, r3, r1, r3
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	1ad2      	subs	r2, r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	490d      	ldr	r1, [pc, #52]	@ (8003ce0 <RTC_WeekDayNum+0xe8>)
 8003cac:	fba1 1303 	umull	r1, r3, r1, r3
 8003cb0:	09db      	lsrs	r3, r3, #7
 8003cb2:	4413      	add	r3, r2
 8003cb4:	1c9a      	adds	r2, r3, #2
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <RTC_WeekDayNum+0xec>)
 8003cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cbc:	1ad1      	subs	r1, r2, r3
 8003cbe:	0849      	lsrs	r1, r1, #1
 8003cc0:	440b      	add	r3, r1
 8003cc2:	0899      	lsrs	r1, r3, #2
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	1a5b      	subs	r3, r3, r1
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	b2db      	uxtb	r3, r3
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr
 8003cdc:	38e38e39 	.word	0x38e38e39
 8003ce0:	51eb851f 	.word	0x51eb851f
 8003ce4:	24924925 	.word	0x24924925

08003ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e0ac      	b.n	8003e54 <HAL_TIM_Base_Init+0x16c>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a57      	ldr	r2, [pc, #348]	@ (8003e5c <HAL_TIM_Base_Init+0x174>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d013      	beq.n	8003d2c <HAL_TIM_Base_Init+0x44>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0c:	d00e      	beq.n	8003d2c <HAL_TIM_Base_Init+0x44>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a53      	ldr	r2, [pc, #332]	@ (8003e60 <HAL_TIM_Base_Init+0x178>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d009      	beq.n	8003d2c <HAL_TIM_Base_Init+0x44>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a51      	ldr	r2, [pc, #324]	@ (8003e64 <HAL_TIM_Base_Init+0x17c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d004      	beq.n	8003d2c <HAL_TIM_Base_Init+0x44>
 8003d22:	f240 1113 	movw	r1, #275	@ 0x113
 8003d26:	4850      	ldr	r0, [pc, #320]	@ (8003e68 <HAL_TIM_Base_Init+0x180>)
 8003d28:	f7fd fb48 	bl	80013bc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d014      	beq.n	8003d5e <HAL_TIM_Base_Init+0x76>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d010      	beq.n	8003d5e <HAL_TIM_Base_Init+0x76>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d00c      	beq.n	8003d5e <HAL_TIM_Base_Init+0x76>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b40      	cmp	r3, #64	@ 0x40
 8003d4a:	d008      	beq.n	8003d5e <HAL_TIM_Base_Init+0x76>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b60      	cmp	r3, #96	@ 0x60
 8003d52:	d004      	beq.n	8003d5e <HAL_TIM_Base_Init+0x76>
 8003d54:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8003d58:	4843      	ldr	r0, [pc, #268]	@ (8003e68 <HAL_TIM_Base_Init+0x180>)
 8003d5a:	f7fd fb2f 	bl	80013bc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00e      	beq.n	8003d84 <HAL_TIM_Base_Init+0x9c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d6e:	d009      	beq.n	8003d84 <HAL_TIM_Base_Init+0x9c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d78:	d004      	beq.n	8003d84 <HAL_TIM_Base_Init+0x9c>
 8003d7a:	f240 1115 	movw	r1, #277	@ 0x115
 8003d7e:	483a      	ldr	r0, [pc, #232]	@ (8003e68 <HAL_TIM_Base_Init+0x180>)
 8003d80:	f7fd fb1c 	bl	80013bc <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <HAL_TIM_Base_Init+0xae>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d94:	d304      	bcc.n	8003da0 <HAL_TIM_Base_Init+0xb8>
 8003d96:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8003d9a:	4833      	ldr	r0, [pc, #204]	@ (8003e68 <HAL_TIM_Base_Init+0x180>)
 8003d9c:	f7fd fb0e 	bl	80013bc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_TIM_Base_Init+0xd2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	2b80      	cmp	r3, #128	@ 0x80
 8003dae:	d004      	beq.n	8003dba <HAL_TIM_Base_Init+0xd2>
 8003db0:	f240 1117 	movw	r1, #279	@ 0x117
 8003db4:	482c      	ldr	r0, [pc, #176]	@ (8003e68 <HAL_TIM_Base_Init+0x180>)
 8003db6:	f7fd fb01 	bl	80013bc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d111      	bne.n	8003dea <HAL_TIM_Base_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fdde 	bl	8004990 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <HAL_TIM_Base_Init+0xfa>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a23      	ldr	r2, [pc, #140]	@ (8003e6c <HAL_TIM_Base_Init+0x184>)
 8003de0:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2202      	movs	r2, #2
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f000 fccf 	bl	80047a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40012c00 	.word	0x40012c00
 8003e60:	40000400 	.word	0x40000400
 8003e64:	40000800 	.word	0x40000800
 8003e68:	08004d60 	.word	0x08004d60
 8003e6c:	080016a5 	.word	0x080016a5

08003e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003f38 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <HAL_TIM_Base_Start_IT+0x3a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e8a:	d00e      	beq.n	8003eaa <HAL_TIM_Base_Start_IT+0x3a>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a2a      	ldr	r2, [pc, #168]	@ (8003f3c <HAL_TIM_Base_Start_IT+0xcc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d009      	beq.n	8003eaa <HAL_TIM_Base_Start_IT+0x3a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a29      	ldr	r2, [pc, #164]	@ (8003f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d004      	beq.n	8003eaa <HAL_TIM_Base_Start_IT+0x3a>
 8003ea0:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8003ea4:	4827      	ldr	r0, [pc, #156]	@ (8003f44 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ea6:	f7fd fa89 	bl	80013bc <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d001      	beq.n	8003eba <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e03a      	b.n	8003f30 <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0201 	orr.w	r2, r2, #1
 8003ed0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a18      	ldr	r2, [pc, #96]	@ (8003f38 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00e      	beq.n	8003efa <HAL_TIM_Base_Start_IT+0x8a>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee4:	d009      	beq.n	8003efa <HAL_TIM_Base_Start_IT+0x8a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a14      	ldr	r2, [pc, #80]	@ (8003f3c <HAL_TIM_Base_Start_IT+0xcc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d004      	beq.n	8003efa <HAL_TIM_Base_Start_IT+0x8a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a12      	ldr	r2, [pc, #72]	@ (8003f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d111      	bne.n	8003f1e <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b06      	cmp	r3, #6
 8003f0a:	d010      	beq.n	8003f2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1c:	e007      	b.n	8003f2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0201 	orr.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40000800 	.word	0x40000800
 8003f44:	08004d60 	.word	0x08004d60

08003f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d128      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d121      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0202 	mvn.w	r2, #2
 8003f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
 8003f94:	e009      	b.n	8003faa <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d128      	bne.n	8004010 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d121      	bne.n	8004010 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0204 	mvn.w	r2, #4
 8003fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
 8003ff4:	e009      	b.n	800400a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b08      	cmp	r3, #8
 800401c:	d128      	bne.n	8004070 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b08      	cmp	r3, #8
 800402a:	d121      	bne.n	8004070 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0208 	mvn.w	r2, #8
 8004034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2204      	movs	r2, #4
 800403a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
 8004054:	e009      	b.n	800406a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b10      	cmp	r3, #16
 800407c:	d128      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b10      	cmp	r3, #16
 800408a:	d121      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0210 	mvn.w	r2, #16
 8004094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2208      	movs	r2, #8
 800409a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4798      	blx	r3
 80040b4:	e009      	b.n	80040ca <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d110      	bne.n	8004100 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d109      	bne.n	8004100 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0201 	mvn.w	r2, #1
 80040f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410a:	2b80      	cmp	r3, #128	@ 0x80
 800410c:	d110      	bne.n	8004130 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004118:	2b80      	cmp	r3, #128	@ 0x80
 800411a:	d109      	bne.n	8004130 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413a:	2b40      	cmp	r3, #64	@ 0x40
 800413c:	d110      	bne.n	8004160 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004148:	2b40      	cmp	r3, #64	@ 0x40
 800414a:	d109      	bne.n	8004160 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b20      	cmp	r3, #32
 800416c:	d110      	bne.n	8004190 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b20      	cmp	r3, #32
 800417a:	d109      	bne.n	8004190 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0220 	mvn.w	r2, #32
 8004184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004190:	bf00      	nop
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_TIM_ConfigClockSource+0x1c>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e296      	b.n	80046e2 <HAL_TIM_ConfigClockSource+0x54a>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041cc:	d029      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x8a>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b70      	cmp	r3, #112	@ 0x70
 80041d4:	d025      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x8a>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041de:	d020      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x8a>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b40      	cmp	r3, #64	@ 0x40
 80041e6:	d01c      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x8a>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b50      	cmp	r3, #80	@ 0x50
 80041ee:	d018      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x8a>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b60      	cmp	r3, #96	@ 0x60
 80041f6:	d014      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x8a>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d010      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x8a>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b10      	cmp	r3, #16
 8004206:	d00c      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x8a>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b20      	cmp	r3, #32
 800420e:	d008      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x8a>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b30      	cmp	r3, #48	@ 0x30
 8004216:	d004      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x8a>
 8004218:	f241 41be 	movw	r1, #5310	@ 0x14be
 800421c:	486b      	ldr	r0, [pc, #428]	@ (80043cc <HAL_TIM_ConfigClockSource+0x234>)
 800421e:	f7fd f8cd 	bl	80013bc <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004230:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004238:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800424a:	f000 80c7 	beq.w	80043dc <HAL_TIM_ConfigClockSource+0x244>
 800424e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004252:	f200 8239 	bhi.w	80046c8 <HAL_TIM_ConfigClockSource+0x530>
 8004256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800425a:	d02d      	beq.n	80042b8 <HAL_TIM_ConfigClockSource+0x120>
 800425c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004260:	f200 8232 	bhi.w	80046c8 <HAL_TIM_ConfigClockSource+0x530>
 8004264:	2b70      	cmp	r3, #112	@ 0x70
 8004266:	d045      	beq.n	80042f4 <HAL_TIM_ConfigClockSource+0x15c>
 8004268:	2b70      	cmp	r3, #112	@ 0x70
 800426a:	f200 822d 	bhi.w	80046c8 <HAL_TIM_ConfigClockSource+0x530>
 800426e:	2b60      	cmp	r3, #96	@ 0x60
 8004270:	f000 8167 	beq.w	8004542 <HAL_TIM_ConfigClockSource+0x3aa>
 8004274:	2b60      	cmp	r3, #96	@ 0x60
 8004276:	f200 8227 	bhi.w	80046c8 <HAL_TIM_ConfigClockSource+0x530>
 800427a:	2b50      	cmp	r3, #80	@ 0x50
 800427c:	f000 8115 	beq.w	80044aa <HAL_TIM_ConfigClockSource+0x312>
 8004280:	2b50      	cmp	r3, #80	@ 0x50
 8004282:	f200 8221 	bhi.w	80046c8 <HAL_TIM_ConfigClockSource+0x530>
 8004286:	2b40      	cmp	r3, #64	@ 0x40
 8004288:	f000 81b0 	beq.w	80045ec <HAL_TIM_ConfigClockSource+0x454>
 800428c:	2b40      	cmp	r3, #64	@ 0x40
 800428e:	f200 821b 	bhi.w	80046c8 <HAL_TIM_ConfigClockSource+0x530>
 8004292:	2b30      	cmp	r3, #48	@ 0x30
 8004294:	f000 81f6 	beq.w	8004684 <HAL_TIM_ConfigClockSource+0x4ec>
 8004298:	2b30      	cmp	r3, #48	@ 0x30
 800429a:	f200 8215 	bhi.w	80046c8 <HAL_TIM_ConfigClockSource+0x530>
 800429e:	2b20      	cmp	r3, #32
 80042a0:	f000 81f0 	beq.w	8004684 <HAL_TIM_ConfigClockSource+0x4ec>
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	f200 820f 	bhi.w	80046c8 <HAL_TIM_ConfigClockSource+0x530>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 81ea 	beq.w	8004684 <HAL_TIM_ConfigClockSource+0x4ec>
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	f000 81e7 	beq.w	8004684 <HAL_TIM_ConfigClockSource+0x4ec>
 80042b6:	e207      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x530>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a44      	ldr	r2, [pc, #272]	@ (80043d0 <HAL_TIM_ConfigClockSource+0x238>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	f000 8205 	beq.w	80046ce <HAL_TIM_ConfigClockSource+0x536>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042cc:	f000 81ff 	beq.w	80046ce <HAL_TIM_ConfigClockSource+0x536>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a3f      	ldr	r2, [pc, #252]	@ (80043d4 <HAL_TIM_ConfigClockSource+0x23c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	f000 81f9 	beq.w	80046ce <HAL_TIM_ConfigClockSource+0x536>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a3d      	ldr	r2, [pc, #244]	@ (80043d8 <HAL_TIM_ConfigClockSource+0x240>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	f000 81f3 	beq.w	80046ce <HAL_TIM_ConfigClockSource+0x536>
 80042e8:	f241 41ca 	movw	r1, #5322	@ 0x14ca
 80042ec:	4837      	ldr	r0, [pc, #220]	@ (80043cc <HAL_TIM_ConfigClockSource+0x234>)
 80042ee:	f7fd f865 	bl	80013bc <assert_failed>
      break;
 80042f2:	e1ec      	b.n	80046ce <HAL_TIM_ConfigClockSource+0x536>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a35      	ldr	r2, [pc, #212]	@ (80043d0 <HAL_TIM_ConfigClockSource+0x238>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x18e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004306:	d00e      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x18e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a31      	ldr	r2, [pc, #196]	@ (80043d4 <HAL_TIM_ConfigClockSource+0x23c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d009      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x18e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a30      	ldr	r2, [pc, #192]	@ (80043d8 <HAL_TIM_ConfigClockSource+0x240>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x18e>
 800431c:	f241 41d1 	movw	r1, #5329	@ 0x14d1
 8004320:	482a      	ldr	r0, [pc, #168]	@ (80043cc <HAL_TIM_ConfigClockSource+0x234>)
 8004322:	f7fd f84b 	bl	80013bc <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d013      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0x1be>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004336:	d00e      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0x1be>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004340:	d009      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0x1be>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800434a:	d004      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0x1be>
 800434c:	f241 41d4 	movw	r1, #5332	@ 0x14d4
 8004350:	481e      	ldr	r0, [pc, #120]	@ (80043cc <HAL_TIM_ConfigClockSource+0x234>)
 8004352:	f7fd f833 	bl	80013bc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800435e:	d014      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x1f2>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d010      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x1f2>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00c      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x1f2>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d008      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x1f2>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b0a      	cmp	r3, #10
 800437e:	d004      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x1f2>
 8004380:	f241 41d5 	movw	r1, #5333	@ 0x14d5
 8004384:	4811      	ldr	r0, [pc, #68]	@ (80043cc <HAL_TIM_ConfigClockSource+0x234>)
 8004386:	f7fd f819 	bl	80013bc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b0f      	cmp	r3, #15
 8004390:	d904      	bls.n	800439c <HAL_TIM_ConfigClockSource+0x204>
 8004392:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 8004396:	480d      	ldr	r0, [pc, #52]	@ (80043cc <HAL_TIM_ConfigClockSource+0x234>)
 8004398:	f7fd f810 	bl	80013bc <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043ac:	f000 fad1 	bl	8004952 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	609a      	str	r2, [r3, #8]
      break;
 80043c8:	e182      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x538>
 80043ca:	bf00      	nop
 80043cc:	08004d60 	.word	0x08004d60
 80043d0:	40012c00 	.word	0x40012c00
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a7e      	ldr	r2, [pc, #504]	@ (80045dc <HAL_TIM_ConfigClockSource+0x444>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x276>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ee:	d00e      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x276>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a7a      	ldr	r2, [pc, #488]	@ (80045e0 <HAL_TIM_ConfigClockSource+0x448>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x276>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a79      	ldr	r2, [pc, #484]	@ (80045e4 <HAL_TIM_ConfigClockSource+0x44c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x276>
 8004404:	f241 41e9 	movw	r1, #5353	@ 0x14e9
 8004408:	4877      	ldr	r0, [pc, #476]	@ (80045e8 <HAL_TIM_ConfigClockSource+0x450>)
 800440a:	f7fc ffd7 	bl	80013bc <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d013      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x2a6>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800441e:	d00e      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x2a6>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004428:	d009      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x2a6>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004432:	d004      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x2a6>
 8004434:	f241 41ec 	movw	r1, #5356	@ 0x14ec
 8004438:	486b      	ldr	r0, [pc, #428]	@ (80045e8 <HAL_TIM_ConfigClockSource+0x450>)
 800443a:	f7fc ffbf 	bl	80013bc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004446:	d014      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x2da>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d010      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x2da>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00c      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x2da>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d008      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x2da>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b0a      	cmp	r3, #10
 8004466:	d004      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x2da>
 8004468:	f241 41ed 	movw	r1, #5357	@ 0x14ed
 800446c:	485e      	ldr	r0, [pc, #376]	@ (80045e8 <HAL_TIM_ConfigClockSource+0x450>)
 800446e:	f7fc ffa5 	bl	80013bc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b0f      	cmp	r3, #15
 8004478:	d904      	bls.n	8004484 <HAL_TIM_ConfigClockSource+0x2ec>
 800447a:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 800447e:	485a      	ldr	r0, [pc, #360]	@ (80045e8 <HAL_TIM_ConfigClockSource+0x450>)
 8004480:	f7fc ff9c 	bl	80013bc <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004494:	f000 fa5d 	bl	8004952 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044a6:	609a      	str	r2, [r3, #8]
      break;
 80044a8:	e112      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x538>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4b      	ldr	r2, [pc, #300]	@ (80045dc <HAL_TIM_ConfigClockSource+0x444>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d013      	beq.n	80044dc <HAL_TIM_ConfigClockSource+0x344>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044bc:	d00e      	beq.n	80044dc <HAL_TIM_ConfigClockSource+0x344>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a47      	ldr	r2, [pc, #284]	@ (80045e0 <HAL_TIM_ConfigClockSource+0x448>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_TIM_ConfigClockSource+0x344>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a45      	ldr	r2, [pc, #276]	@ (80045e4 <HAL_TIM_ConfigClockSource+0x44c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_TIM_ConfigClockSource+0x344>
 80044d2:	f241 41fd 	movw	r1, #5373	@ 0x14fd
 80044d6:	4844      	ldr	r0, [pc, #272]	@ (80045e8 <HAL_TIM_ConfigClockSource+0x450>)
 80044d8:	f7fc ff70 	bl	80013bc <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044e4:	d014      	beq.n	8004510 <HAL_TIM_ConfigClockSource+0x378>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d010      	beq.n	8004510 <HAL_TIM_ConfigClockSource+0x378>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00c      	beq.n	8004510 <HAL_TIM_ConfigClockSource+0x378>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d008      	beq.n	8004510 <HAL_TIM_ConfigClockSource+0x378>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b0a      	cmp	r3, #10
 8004504:	d004      	beq.n	8004510 <HAL_TIM_ConfigClockSource+0x378>
 8004506:	f44f 51a8 	mov.w	r1, #5376	@ 0x1500
 800450a:	4837      	ldr	r0, [pc, #220]	@ (80045e8 <HAL_TIM_ConfigClockSource+0x450>)
 800450c:	f7fc ff56 	bl	80013bc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b0f      	cmp	r3, #15
 8004516:	d904      	bls.n	8004522 <HAL_TIM_ConfigClockSource+0x38a>
 8004518:	f241 5101 	movw	r1, #5377	@ 0x1501
 800451c:	4832      	ldr	r0, [pc, #200]	@ (80045e8 <HAL_TIM_ConfigClockSource+0x450>)
 800451e:	f7fc ff4d 	bl	80013bc <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800452e:	461a      	mov	r2, r3
 8004530:	f000 f998 	bl	8004864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2150      	movs	r1, #80	@ 0x50
 800453a:	4618      	mov	r0, r3
 800453c:	f000 f9ef 	bl	800491e <TIM_ITRx_SetConfig>
      break;
 8004540:	e0c6      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x538>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a25      	ldr	r2, [pc, #148]	@ (80045dc <HAL_TIM_ConfigClockSource+0x444>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d013      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0x3dc>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004554:	d00e      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0x3dc>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a21      	ldr	r2, [pc, #132]	@ (80045e0 <HAL_TIM_ConfigClockSource+0x448>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d009      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0x3dc>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1f      	ldr	r2, [pc, #124]	@ (80045e4 <HAL_TIM_ConfigClockSource+0x44c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0x3dc>
 800456a:	f241 510d 	movw	r1, #5389	@ 0x150d
 800456e:	481e      	ldr	r0, [pc, #120]	@ (80045e8 <HAL_TIM_ConfigClockSource+0x450>)
 8004570:	f7fc ff24 	bl	80013bc <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800457c:	d014      	beq.n	80045a8 <HAL_TIM_ConfigClockSource+0x410>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d010      	beq.n	80045a8 <HAL_TIM_ConfigClockSource+0x410>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00c      	beq.n	80045a8 <HAL_TIM_ConfigClockSource+0x410>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d008      	beq.n	80045a8 <HAL_TIM_ConfigClockSource+0x410>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b0a      	cmp	r3, #10
 800459c:	d004      	beq.n	80045a8 <HAL_TIM_ConfigClockSource+0x410>
 800459e:	f241 5110 	movw	r1, #5392	@ 0x1510
 80045a2:	4811      	ldr	r0, [pc, #68]	@ (80045e8 <HAL_TIM_ConfigClockSource+0x450>)
 80045a4:	f7fc ff0a 	bl	80013bc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b0f      	cmp	r3, #15
 80045ae:	d904      	bls.n	80045ba <HAL_TIM_ConfigClockSource+0x422>
 80045b0:	f241 5111 	movw	r1, #5393	@ 0x1511
 80045b4:	480c      	ldr	r0, [pc, #48]	@ (80045e8 <HAL_TIM_ConfigClockSource+0x450>)
 80045b6:	f7fc ff01 	bl	80013bc <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045c6:	461a      	mov	r2, r3
 80045c8:	f000 f97a 	bl	80048c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2160      	movs	r1, #96	@ 0x60
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 f9a3 	bl	800491e <TIM_ITRx_SetConfig>
      break;
 80045d8:	e07a      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x538>
 80045da:	bf00      	nop
 80045dc:	40012c00 	.word	0x40012c00
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800
 80045e8:	08004d60 	.word	0x08004d60
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a3e      	ldr	r2, [pc, #248]	@ (80046ec <HAL_TIM_ConfigClockSource+0x554>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x486>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045fe:	d00e      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x486>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a3a      	ldr	r2, [pc, #232]	@ (80046f0 <HAL_TIM_ConfigClockSource+0x558>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x486>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a39      	ldr	r2, [pc, #228]	@ (80046f4 <HAL_TIM_ConfigClockSource+0x55c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x486>
 8004614:	f241 511d 	movw	r1, #5405	@ 0x151d
 8004618:	4837      	ldr	r0, [pc, #220]	@ (80046f8 <HAL_TIM_ConfigClockSource+0x560>)
 800461a:	f7fc fecf 	bl	80013bc <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004626:	d014      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x4ba>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d010      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x4ba>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00c      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x4ba>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d008      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x4ba>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b0a      	cmp	r3, #10
 8004646:	d004      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x4ba>
 8004648:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 800464c:	482a      	ldr	r0, [pc, #168]	@ (80046f8 <HAL_TIM_ConfigClockSource+0x560>)
 800464e:	f7fc feb5 	bl	80013bc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b0f      	cmp	r3, #15
 8004658:	d904      	bls.n	8004664 <HAL_TIM_ConfigClockSource+0x4cc>
 800465a:	f241 5121 	movw	r1, #5409	@ 0x1521
 800465e:	4826      	ldr	r0, [pc, #152]	@ (80046f8 <HAL_TIM_ConfigClockSource+0x560>)
 8004660:	f7fc feac 	bl	80013bc <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004670:	461a      	mov	r2, r3
 8004672:	f000 f8f7 	bl	8004864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2140      	movs	r1, #64	@ 0x40
 800467c:	4618      	mov	r0, r3
 800467e:	f000 f94e 	bl	800491e <TIM_ITRx_SetConfig>
      break;
 8004682:	e025      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x538>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a18      	ldr	r2, [pc, #96]	@ (80046ec <HAL_TIM_ConfigClockSource+0x554>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x51e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004696:	d00e      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x51e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a14      	ldr	r2, [pc, #80]	@ (80046f0 <HAL_TIM_ConfigClockSource+0x558>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d009      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x51e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a13      	ldr	r2, [pc, #76]	@ (80046f4 <HAL_TIM_ConfigClockSource+0x55c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d004      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x51e>
 80046ac:	f241 5130 	movw	r1, #5424	@ 0x1530
 80046b0:	4811      	ldr	r0, [pc, #68]	@ (80046f8 <HAL_TIM_ConfigClockSource+0x560>)
 80046b2:	f7fc fe83 	bl	80013bc <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4619      	mov	r1, r3
 80046c0:	4610      	mov	r0, r2
 80046c2:	f000 f92c 	bl	800491e <TIM_ITRx_SetConfig>
      break;
 80046c6:	e003      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x538>
    }

    default:
      status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
      break;
 80046cc:	e000      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x538>
      break;
 80046ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40012c00 	.word	0x40012c00
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800
 80046f8:	08004d60 	.word	0x08004d60

080046fc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr

0800470e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr

08004732 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr

08004744 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr

0800477a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
	...

080047a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a29      	ldr	r2, [pc, #164]	@ (8004858 <TIM_Base_SetConfig+0xb8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00b      	beq.n	80047d0 <TIM_Base_SetConfig+0x30>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047be:	d007      	beq.n	80047d0 <TIM_Base_SetConfig+0x30>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a26      	ldr	r2, [pc, #152]	@ (800485c <TIM_Base_SetConfig+0xbc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d003      	beq.n	80047d0 <TIM_Base_SetConfig+0x30>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a25      	ldr	r2, [pc, #148]	@ (8004860 <TIM_Base_SetConfig+0xc0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d108      	bne.n	80047e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004858 <TIM_Base_SetConfig+0xb8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00b      	beq.n	8004802 <TIM_Base_SetConfig+0x62>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047f0:	d007      	beq.n	8004802 <TIM_Base_SetConfig+0x62>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a19      	ldr	r2, [pc, #100]	@ (800485c <TIM_Base_SetConfig+0xbc>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d003      	beq.n	8004802 <TIM_Base_SetConfig+0x62>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a18      	ldr	r2, [pc, #96]	@ (8004860 <TIM_Base_SetConfig+0xc0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d108      	bne.n	8004814 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a07      	ldr	r2, [pc, #28]	@ (8004858 <TIM_Base_SetConfig+0xb8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d103      	bne.n	8004848 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	615a      	str	r2, [r3, #20]
}
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40000400 	.word	0x40000400
 8004860:	40000800 	.word	0x40000800

08004864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f023 0201 	bic.w	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800488e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f023 030a 	bic.w	r3, r3, #10
 80048a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f023 0210 	bic.w	r2, r3, #16
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	031b      	lsls	r3, r3, #12
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	621a      	str	r2, [r3, #32]
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr

0800491e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	f043 0307 	orr.w	r3, r3, #7
 8004940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	609a      	str	r2, [r3, #8]
}
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004952:	b480      	push	{r7}
 8004954:	b087      	sub	sp, #28
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]
 800495e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800496c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	021a      	lsls	r2, r3, #8
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	431a      	orrs	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4313      	orrs	r3, r2
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	609a      	str	r2, [r3, #8]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr

08004990 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a0c <TIM_ResetCallback+0x7c>)
 800499c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a10 <TIM_ResetCallback+0x80>)
 80049a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004a14 <TIM_ResetCallback+0x84>)
 80049ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a19      	ldr	r2, [pc, #100]	@ (8004a18 <TIM_ResetCallback+0x88>)
 80049b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a18      	ldr	r2, [pc, #96]	@ (8004a1c <TIM_ResetCallback+0x8c>)
 80049bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a17      	ldr	r2, [pc, #92]	@ (8004a20 <TIM_ResetCallback+0x90>)
 80049c4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a16      	ldr	r2, [pc, #88]	@ (8004a24 <TIM_ResetCallback+0x94>)
 80049cc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a15      	ldr	r2, [pc, #84]	@ (8004a28 <TIM_ResetCallback+0x98>)
 80049d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a14      	ldr	r2, [pc, #80]	@ (8004a2c <TIM_ResetCallback+0x9c>)
 80049dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a13      	ldr	r2, [pc, #76]	@ (8004a30 <TIM_ResetCallback+0xa0>)
 80049e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a12      	ldr	r2, [pc, #72]	@ (8004a34 <TIM_ResetCallback+0xa4>)
 80049ec:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a11      	ldr	r2, [pc, #68]	@ (8004a38 <TIM_ResetCallback+0xa8>)
 80049f4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a10      	ldr	r2, [pc, #64]	@ (8004a3c <TIM_ResetCallback+0xac>)
 80049fc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	08001381 	.word	0x08001381
 8004a10:	080046fd 	.word	0x080046fd
 8004a14:	08004769 	.word	0x08004769
 8004a18:	0800477b 	.word	0x0800477b
 8004a1c:	08004721 	.word	0x08004721
 8004a20:	08004733 	.word	0x08004733
 8004a24:	0800470f 	.word	0x0800470f
 8004a28:	08004745 	.word	0x08004745
 8004a2c:	08004757 	.word	0x08004757
 8004a30:	0800478d 	.word	0x0800478d
 8004a34:	08004b95 	.word	0x08004b95
 8004a38:	08004ba7 	.word	0x08004ba7
 8004a3c:	08004bb9 	.word	0x08004bb9

08004a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a4d      	ldr	r2, [pc, #308]	@ (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d013      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a5c:	d00e      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a49      	ldr	r2, [pc, #292]	@ (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d009      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a47      	ldr	r2, [pc, #284]	@ (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004a72:	f240 71b4 	movw	r1, #1972	@ 0x7b4
 8004a76:	4846      	ldr	r0, [pc, #280]	@ (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8004a78:	f7fc fca0 	bl	80013bc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d020      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d01c      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d018      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b30      	cmp	r3, #48	@ 0x30
 8004a9a:	d014      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b40      	cmp	r3, #64	@ 0x40
 8004aa2:	d010      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b50      	cmp	r3, #80	@ 0x50
 8004aaa:	d00c      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b60      	cmp	r3, #96	@ 0x60
 8004ab2:	d008      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b70      	cmp	r3, #112	@ 0x70
 8004aba:	d004      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004abc:	f240 71b5 	movw	r1, #1973	@ 0x7b5
 8004ac0:	4833      	ldr	r0, [pc, #204]	@ (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8004ac2:	f7fc fc7b 	bl	80013bc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b80      	cmp	r3, #128	@ 0x80
 8004acc:	d008      	beq.n	8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d004      	beq.n	8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8004ad6:	f240 71b6 	movw	r1, #1974	@ 0x7b6
 8004ada:	482d      	ldr	r0, [pc, #180]	@ (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8004adc:	f7fc fc6e 	bl	80013bc <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e046      	b.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a15      	ldr	r2, [pc, #84]	@ (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00e      	beq.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b3a:	d009      	beq.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a11      	ldr	r2, [pc, #68]	@ (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a10      	ldr	r2, [pc, #64]	@ (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d10c      	bne.n	8004b6a <HAL_TIMEx_MasterConfigSynchronization+0x12a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40012c00 	.word	0x40012c00
 8004b88:	40000400 	.word	0x40000400
 8004b8c:	40000800 	.word	0x40000800
 8004b90:	08004d98 	.word	0x08004d98

08004b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bc80      	pop	{r7}
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr

08004bca <memset>:
 8004bca:	4603      	mov	r3, r0
 8004bcc:	4402      	add	r2, r0
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d100      	bne.n	8004bd4 <memset+0xa>
 8004bd2:	4770      	bx	lr
 8004bd4:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd8:	e7f9      	b.n	8004bce <memset+0x4>
	...

08004bdc <__libc_init_array>:
 8004bdc:	b570      	push	{r4, r5, r6, lr}
 8004bde:	2600      	movs	r6, #0
 8004be0:	4d0c      	ldr	r5, [pc, #48]	@ (8004c14 <__libc_init_array+0x38>)
 8004be2:	4c0d      	ldr	r4, [pc, #52]	@ (8004c18 <__libc_init_array+0x3c>)
 8004be4:	1b64      	subs	r4, r4, r5
 8004be6:	10a4      	asrs	r4, r4, #2
 8004be8:	42a6      	cmp	r6, r4
 8004bea:	d109      	bne.n	8004c00 <__libc_init_array+0x24>
 8004bec:	f000 f81a 	bl	8004c24 <_init>
 8004bf0:	2600      	movs	r6, #0
 8004bf2:	4d0a      	ldr	r5, [pc, #40]	@ (8004c1c <__libc_init_array+0x40>)
 8004bf4:	4c0a      	ldr	r4, [pc, #40]	@ (8004c20 <__libc_init_array+0x44>)
 8004bf6:	1b64      	subs	r4, r4, r5
 8004bf8:	10a4      	asrs	r4, r4, #2
 8004bfa:	42a6      	cmp	r6, r4
 8004bfc:	d105      	bne.n	8004c0a <__libc_init_array+0x2e>
 8004bfe:	bd70      	pop	{r4, r5, r6, pc}
 8004c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c04:	4798      	blx	r3
 8004c06:	3601      	adds	r6, #1
 8004c08:	e7ee      	b.n	8004be8 <__libc_init_array+0xc>
 8004c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c0e:	4798      	blx	r3
 8004c10:	3601      	adds	r6, #1
 8004c12:	e7f2      	b.n	8004bfa <__libc_init_array+0x1e>
 8004c14:	08004e14 	.word	0x08004e14
 8004c18:	08004e14 	.word	0x08004e14
 8004c1c:	08004e14 	.word	0x08004e14
 8004c20:	08004e18 	.word	0x08004e18

08004c24 <_init>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	bf00      	nop
 8004c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2a:	bc08      	pop	{r3}
 8004c2c:	469e      	mov	lr, r3
 8004c2e:	4770      	bx	lr

08004c30 <_fini>:
 8004c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c32:	bf00      	nop
 8004c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c36:	bc08      	pop	{r3}
 8004c38:	469e      	mov	lr, r3
 8004c3a:	4770      	bx	lr
